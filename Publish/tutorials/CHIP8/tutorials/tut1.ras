program Tut1;
@use "system/system"
var
	@donotremove sprite
	sprite : array[8] of byte =(
    %01101110,
    %10000001,
    %10100101,
    %10111101,
    %10101101,
    %10011001,
    %10000001,
    %01111110
	,$FF,$FF,$FF
);
	x,y,z : byte;
	
procedure Init();
begin
	
	asm("
		cls
	");
//	asm(";here");
//	y:=16;
	asm("
	ld v0, 16
;	ld i,y
;	ld [i],v0
	
	");
end;

	
begin
	Init();
	System::Beep(100);
	
	for x:=0 to 100 do
	begin
		y:=x+10;
		z:=System::Random();
		System::DrawLine(x,y,$FF);
	end;	
	
	asm("
loop:

	jp loop
	
	");
	
/*	asm("
	
	define boxx V0 ; Sprite X,Y position
	define boxy V1
	define oldx V2 ; Previous sprite X,Y position
	define oldy V3
	define dirx V4 ; Sprite direction
	define diry V5
	define tmp VE
	
	; Clear the screen
		
	; Load the variables' initial values
	LD  boxx, 1
	LD  dirx, 1
;	ld i,y
	LD  boxy, 10
	LD  I, sprite
	DRW boxx, boxy, 12
	LD  tmp, 1  
	
	; The main loop
	loop:
		; Store the current position 
	LD oldx, boxx
	LD oldy, boxy
		
		; If the X direction is 0, go to sub1...
	SE dirx, 0
	JP sub1
		
		; ...otherwise add 1 to the box' position 
	ADD boxx, 1
	
		; If you reached the right edge of the screen, change direction
	SNE boxx, 56
		LD  dirx, 1
	jp draw1
	sub1: 
		; subtract 1 from the box' position
	SUB boxx, tmp
		
		; If you reached the left edge of the screen, change direction
	SNE boxx, 0
	LD  dirx, 0 
	
	; Draw the box
	draw1:  
		; Load the address of the sprite's graphics into register I
	LD  I, sprite
		; Erase the sprite at the old position
	DRW oldx, oldy, 8
		; Draw the sprite at the new position
	DRW boxx, boxy, 8

	; Return to the start of the loop
	JP  loop

; Binary data of the sprite.
; 1s represent pixels to be drawn, 0s are blank pixels.



	");	
*/	
	
end.
