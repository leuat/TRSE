program CirclesOhYes;
@use "system"
@use "memory"
@use "screen"
@use "compression/compression"


@addemulatorparam "-nothrottle"

// Good old tunnel example!

var  
	// some plasma variables
	ctr,val,val2,time, time2,time3,z : byte;
	x,y,shift,i : byte;
	keep_s : integer;
	// mini sine table
	// Org sine table
	sin : array[256] of byte = buildsinetable(127);
 	// smooth data generated in resources/fjong/generate_data.fjo
	@perlinnoise "data/perlin16.dat" 16 16 1 1 1 0 255
	data : incbin("data/smooth_data.bin");
	perlin : incbin("data/perlin16.dat");
	
	
	// Char width of the circles
	const width : byte= 40;
	// Char data width of the circles
	const dwidth : byte = width;
	// Char width of the circles
	const height:byte = 180;

	const hei : byte = 40;
	sqr : array[] of byte = buildtable2d(dwidth,height,"Math.floor((128/(Math.sqrt(Math.pow(i-DWIDTH/2,2)*8+Math.pow(j-HEIGHT/4,2))+8)*8))%16");	
	atan : array[] of byte = buildtable2d(dwidth,height,"(Math.floor(Math.atan2((i-DWIDTH/2)*4,j-HEIGHT/4)*255.0/(3.14159*2.0)*0.3))*16");	
	//sqr : array[] of byte = buildtable2d(height,dwidth,"Math.atan2((i-20)/2-20,j-HEI/2-20)*255.0/(3.14159*2.0)*6");	
	dx:byte=64;
	src1, src2, dst : ^byte;


procedure Circles();
begin
	src1 := #sqr;
	src2 := #atan;
	
	dst := #Screen::gfx + shift*40;
	z:=(sin[time2]>>2)<<4;
	for y:=0 to 100 step 2 offpage  do 
	begin
		asm("

		
		ldy src1
		ldx src2
		ldu dst
		ldb #0
		
		");
		for z:=0 to width unroll do
		begin
			asm("
				lda ,y+
				adda time
				anda #15
				ora ,x+
				adda z
				pshs x
				ldx #perlin+128
				lda a,x
				ldx #data+128
				lda a,x
				puls x
				
				sta ,u+
			
			");
		end;	
		asm("
		
		");
	
		dst+=40*4;
		src1+=dwidth*2;
		src2+=dwidth*2;
	end;

end;
var
	i3:integer;

begin
	System::Init();
	// 320x225 4-colour 
	Screen::SetBitmapMode(Screen::BPL_40, 1);
	Screen::SetColor(0,0); // black
	Screen::SetColor(1,$6);
	Screen::SetColor(2,24); 
	Screen::SetColor(3,40); 
	// Clearscreen
	Memory::Fill16(#Screen::gfx,0,40*225);
	while (true) do
	begin
		Circles();
		time+=1;
		time2+=3;
		time3-=13;
		if (time&3=0) then dx+=1;
		shift:=(shift+1)&3;
	end;

end.
