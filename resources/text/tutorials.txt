
C64; Main Commodore 64 tutorials; C64/Tutorials/; <h2>Main Commodore 64 tutorials</h2><p><tr><td><img src=":resources/images/trse_icon.png" width="100" class="center"></td><td>Recommended starting point for any new user. The tutorials are divided into four categories (and directories):<ul><li>Language introduction</li><li>Easy</li><li>Intermediate</li><li>Advanced</li></ul>The C64 tutorials are a coherent set of well-documented examples that will propel you from a complete beginner to an advanced user of TRSE. The skills you learn here will be applicable to all the other tutorial projects as well.</td></tr>
C64; Demo Effects; C64/demoeffects/; <h2>Various C64 demo effects made with TRSE</h2><br><img src=":resources/images/tutorials/demoeffects.png" width="320" class="center"><p>This project contains stand-alone demo effects, both unused but also some that have been released in various demo productions. All resources included. Most of the effects are made by Leuat.
C64; Ray Tracer Demo Effects; C64/DemoEffects_raytracer/; <h2>The built-in "Fjong" real-time ray tracer for C64 demo effects</h2><br><img src=":resources/images/tutorials/fjong1.png" width="256" class="center"><p>The built-in "Fjong" Raytracer enables creation of ray-traced 3D scenes that can be exported to a data format that the C64/Amiga/VIC-20 etc can read. Most of the demos effects created with TRSE used this ray tracer. <p>You program your scenes in Lua, and then run the Fjong 3D program with CTRL+R. In this project, a number of C64 examples have been supplied in order to demonstrate the synergy between the Fjong ray tracer and the TRSE compiler. <p>The lua script language in TRSE has been expanded with a bunch of useful commands for compressing and exporting user-defined 8-bit data.
C64; Game tutorial; C64/TutorialGame_Introduction/; <h2>Simple game tutorial</h2><br><img src=":resources/images/tutorials/trse_game_tuts.png" width="260" class="center"><p>Learn how to create a very simple game setup with TRSE! Sprite handling, joystick and level editor.
C64; Rogue Burger One; C64/TutorialGame_RogueBurgerOne/; <h2>Rogue Burger One</h2><p><img src=":resources/images/tutorials/rb1.png" width="256" class="center"><br><p>Rogue Burger 1 is a small tutorial game that was <a href="https://leuat.itch.io/rogue-burger-one" class="center">released on itch.io</a> in august 2018. <p>The full source code of the game is available, including all the sprites, character sets and levels. <p>The levels were created with the built-in level editor in TRSE.<p>Please note that the source code is not optimized for presentation, since it was written during the early stages of TRSE development. Expect some outdated and messy code.
C64; Wormwood; C64/wormwood/; <h2>Wormwood</h2><br><img src=":resources/images/tutorials/wormwood.png" width="240" class="center"><br><p>Wormwood is an unfinished rogue-like / diablo-inspired 16kb cartridge game for the C64 that lets you explore random levels with random loot.
C64; Disk loader; C64/Disk_loader_project/; <h2>C64 disk project sample</h2><p><img src=":resources/images/tutorials/floppy.jpeg" width="160" class="center"><p>Sample project for setting up a project that loads multiple files from disk.</td></tr>
C64; Demo sample project (disk); C64/disk_demo_project/; <h2>C64 disk demo project</h2><p><img src=":resources/images/tutorials/fig3d.png" width="200" class="center"><p>Sample project for setting up a c64 demo project that loads 3 compressed effects from disk.</td></tr>
C64; DemoMaker; C64/DemoMaker/; <h2>Setup for single-file C64 demo</h2><br><img src=":resources/images/tutorials/torus.png" width="200" class="center"><p>Sample project for setting up a single-file .prg C64 demo with packed resources, music and scenes + transitions.
C64; JoyPaddle 16kb cartridge project; C64/joypaddle/; <h2>Joystick tester cart by Jartza</h2><br><img src=":resources/images/tutorials/joypaddle.png" width="200" class="center"><p>16 kb cartridge project for the commodore 64 that test your joystick.
C64; PBM Unit; C64/pbm-pet/; <h2>Pet Bitmap Mode (PBM)</h2><div><img src=":resources/images/tutorials/pbm.png" width="300" class="center"><p>For drawing using PETSCII 2x2 blocks, provides a low-res 80x50 bitmap out of characters. Supports drawing sprites and tiles, including mirrored drawing.</p><p>PBM created by Andy H (HEWCO)
C64; 1981 (main demo); C64/1981/demo_system/; <h2>1981 (Demo)</h2><br><img src=":resources/images/billboard/b16.png" width="200" class="center"><p>This is the full source code of the 1981 demo by Proxima. See https://www.youtube.com/watch?v=I0G5IxSBQl4. <p>This project contains the "main" demo part, which is the loader that ties all the various effects together. The project packs all effects to disk, and loads them in the order specified by the order list. This project also notifies effects on when transitions etc should occur, and manages the music.
C64; 1981 (demo effects); C64/1981/effects/; <h2>1981 (Demo effects)</h2><br><img src=":resources/images/billboard/b16.png" width="200" class="center"><p>This is the full source code of the 1981 demo by Proxima. See https://www.youtube.com/watch?v=I0G5IxSBQl4. <p>This project contains all the demo effects used in the demo, and can be compiled and executed stand alone. Also, this project contains the main "build all" script that will compile up all effects and place them at the correct memory location for inclusion by the main demo project. Have fun!
C64; Music Player; C64/MusicPlayer/; <h2>C64 dual SID music player example</h2><p><img src=":resources/images/tutorials/mibri1.png" width="200" class="center"><p>Real-life example project of a dual SID music player. Released on csdb, music and art by Mibri.
C64; Big Pixel Intro; C64/BigPixelIntro/; <h2>Big Pixel Intro by Zzarko</h2><br><img src=":resources/images/tutorials/bigpixelintro.png" width="200" class="center"><p>Big Pixel Intro is a small C64 intro made by Zzarko. <p>Csdb link: https://csdb.dk/release/?id=212589
C64; Sound Test; C64/SoundTest/; <h2>C64 Sound Test by Shinzo81</h2><br><img src=":resources/images/tutorials/soundtest.png" width="200" class="center"><p>SoundTest is a small sample program that let's you play around with the SID.
C64; $4k Dreams; C64/4kDreams/; <h2>$4k (16kb) cracktro example</h2><br><img src=":resources/images/tutorials/4kdreams.png" width="200" class="center"><p>Full source included.
C64; Olimp I/O Controll; C64/Olimp/; <h2>Interfacing with the hardware and interpreted language example</h2><br><img src=":resources/images/tutorials/olimp.png" width="256" class="center"><p>Full source included. Find out more at https://bitbucket.org/zzarko/olimp/</p>
C64; Floskel; C64/Floskel/; <h2>Small one-filer competing in the csdb event "Most unreadable scroller compo 2019".</h2><br><img src=":resources/images/tutorials/floskel.png" width="200" class="center"><p>Full source code + resources + raytracer files included.
C64; 16kb cartridge project; C64/16kb_cartridge_project/; <h2>16kb cartridge project</h2><p>This tutorial shows how to set up / create a 16 kb cartridge project for the commodore 64.<p>Note that for a .crt file to compile, you <b>need to have exomizer compression turned on!</b>
C64; Unit tests; C64/UnitTests/; <h2>TRSE internal unit tests</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>This project contains various unit test files for testing and verifying that the compiler is working as it should.

VIC20; Main Vic-20 tutorials; VIC20/tutorials/ ;  <h2>Main Vic-20 tutorials</h2><p><img src=":resources/images/tutorials/trse_vic.png" width="200" class="center"><p>Recommended starting point for anybody interested in coding for the VIC-20. Easy and advanced tutorials. <p>Please note that most of the C64 tutorials / demo effects can also easily be converted to work for the VIC-20.
VIC20; VBM Examples; VIC20/vbm/ ;  <h2>Vic Bitmap Mode Examples</h2><p><tr><td><img src=":resources/images/tutorials/vbm.png" width="150" class="center"></td><td>Example files to demonstrate some of the commands available in VBM.<p>VBM provides a full screen bitmap to draw to and fast commands for sprites, tiles, tilemaps and text.</td></tr>
VIC20; LBM8 Examples; VIC20/lbm/ ;  <h2>Local Bitmap Mode Examples</h2><p><tr><td>Example files to demonstrate some of the commands available in LBM8.<p>LBM8 provides the ability to render sprites on a normal character display. You assign some characters to be used as small local bitmaps to display the sprites. There are two simple commands to draw and erase the sprites. LBM is not as powerful as VBM, but it has a couple of distinct advantages. Firstly, the colour memory is the default at a size of 8x8 pixels instead of 8x16. Secondly, LBM8 will run on an unexpanded Vic 20.</td></tr>
VIC20; Purple Planet Yo!; VIC20/PurplePlanetYo; <h2>Purple Planet Yo: the VIC-20 Demo</h2><br><img src=":resources/images/tutorials/ppl.png" width="256" class="center"><p>Purple Planet Yo is a 32kb demo for the expanded VIC-20. The demo was released on Fj√§lldata in 2019.<p>Full source code included, but the Fjong Raytracer methods that was used to create the 3D effects are not included. We recommend that the motivated user seeks out the Fjong Raytracer tutorials!
VIC20; Vic Nibbler;  VIC20/VicNibbler; <h2>Vic Nibbler</h2><p>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/nibbler.gif" width="256" class="center"></div><p>Vic Nibbler for the VIC-20 with 3K RAM expansion released in 2019. The complete source code for the game is included.  Start with nibbler.ras.  A number of constants, variables and include files are defined in the VAR section.</p><p>To run, install VICE and tell TRSE's configuration where to find the emulator, then press Ctrl+R in the Nibbler.ras source file.  The start address for a 3K expanded game is $0400.</p><p>Find out more at https://hewco.uk</p>
VIC20; PumpKid;  VIC20/PumpKid/; <h2>PumpKid</h2><p>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/pumpkid.png" width="256" class="center"></div><p>Pumpkid for the VIC-20 with 16K RAM expansion released in 2019. The complete source code for the game is included.  Start with pumpkid.ras.  A number of constants, variables and include files are defined in the VAR section.</p><p>To run, install VICE and Exomizer 3 and tell TRSE's configuration where to find the emulator and Exomizer, then press Ctrl+R in the Pumpkid.ras source file.</p><p>Find out more at https://www.hewco.uk</p>
VIC20; Cheesy Trials;  VIC20/cheesy; <h2>Cheesy Trials</h2>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/cheesy.gif" width="256" class="center"></div><p>Echo the Mouse in "Cheesy Trials" for the VIC-20 with 24K RAM expansion released in 2020. The complete source code for the game is included. Start with main.ras.</p><p>Help Echo the Mouse collect the cheese in each room. There are three experiments to play in, each with multiple rooms. Switch between experiments at any time. To win freedom for Echo, complete all rooms across all experiments.</p><p>Find out more at https://www.hewco.uk</p>
VIC20; Escape2020;  VIC20/escape; <h2>Escape 2020</h2>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/escape.png" width="256" class="center"></div><p>Escape 2020 for the unexpanded VIC-20 released in 2020. The complete source code for the game is included.  Start with main.ras and run with Exomizer to test the game. Note that there will be no sound, this is because the loader program sets some things up such as that. The game can also be started without the loader by typing SYS 4096 from the BASIC prompt or g 1000 in the vice monitor. There is a tape and disk loader program included in the source code, shoudl you wish to build the full experience. The tape loader adds flashy bars!</p><p>In Escape 2020, you must locate all 44 keys to exit the nightmare that is 2020 and escape to a better future. Shoot the monsters that roam the world to avoid being eaten. Oh, and the monsters have acid for blood. This is 2020 after all!.</p><p>Find out more at https://www.hewco.uk</p>
#VIC20; Vixmas; VIC20/vixmas_demo; <h2>Vixmas (demo)</h2><br><img src=":resources/images/tutorials/vixmas.png" width="300" class="center"><p>Vixmas is a small demo for the 24kb expanded Vic-20. Full source code is included.<p>Please note that since the demo uses a weird music player, the project only compiles with the <b>Dasm</b> assembler (and not the internal).
VIC20; PBM Unit; VIC20/pbm-pet/; <h2>Pet Bitmap Mode (PBM)</h2><div><img src=":resources/images/tutorials/pbm.png" width="300" class="center"><p>For drawing using PETSCII 2x2 blocks, provides a low-res 80x50 bitmap out of characters. Supports drawing sprites and tiles, including mirrored drawing. Vic 20 implementation supports virtual scrolling as its screen display is smaller than the PET and C64.</p><p>PBM created by Andy H (HEWCO)
VIC20; Snake Games are the Best Games; VIC20/snake; <h2>Snake Games are the Best Games</h2><p>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/SGATBG.gif" width="256" class="center"></div><p>SGatBG for the unexpanded VIC-20 released in 2022. The complete source code for the game is included. Start with main.ras.</p><p>Control the snake with the joystick or WASD keys. Collect food for points and a certain combination will produce green jelly bonus, otherwise a bad yellow mushroom is created. The game is split into waves and sections, where bonus points are awarded for the number of mushrooms in play. Play harder levels for larger scores ... if you can survive long enough!</p><p>Find out more at https://www.hewco.uk</p>

PLUS4; Main Commodore PLUS/4 tutorials; PLUS4/Tutorials/;<h2>Main Commodore Plus/4 tutorials</h2>Support for the Plus/4 was added in version 0.08, with a bunch of fresh and new tutorials!<br><img src=":resources/images/tutorials/plus4_tut.png" width="300" class="center"><p><i>Small disclaimer: </i>Most built-in methods are not yet updated to work for the PLUS/4. This will be added later, within a larger project setting.


C128; Main Commodore 128 tutorials; C128/tutorials/;<h2>Main C128 tutorials</h2><p><img src=":resources/images/tutorials/c128.png" width="300" class="center"><p>The official TRSE C128 introductory tutorials.
C128; A small game; C128/small_game/;<h2>A small game</h2><p><img src=":resources/images/tutorials/small_game_c128.png" width="300" class="center"><p>A small C128 game made by CrazySpence

PET; Main Commodore PET tutorials; PET/examples/;<h2>Main Commodore PET tutorials</h2><p><img src=":resources/images/PET.png" width="300" class="center">The official PET tutorials!
PET; PETFrog; PET/PETFrog/;<h2>PET Frog game</h2><p><img src=":resources/images/billboard/b30.png" width="300" class="center"><p>PET Frog for the VIC-20!<p>By Chris Garrett
PET; PBM Unit; PET/pbm-pet/; <h2>Pet Bitmap Mode (PBM)</h2><div><img src=":resources/images/tutorials/pbm.png" width="300" class="center"><p>For drawing using PETSCII 2x2 blocks, provides a low-res 80x50 bitmap out of characters. Supports drawing sprites and tiles, including mirrored drawing.</p><p>PBM created by Andy H (HEWCO)

X16; Main X16 examples; X16/Tutorials/; <h2>Main Commander X16 tutorials</h2><p><img src=":resources/images/X16.png" width="200" class="center"><p>TRSE tutorials for the Commander X16!

OK64; Main OK64 examples ; OK64/Tutorials/; <h2>Main OK64 tutorials</h2><tr><td><img src=":resources/images/tutorials/ok1.png" width="150" class="center"></td><td>OK64 is Leuat's very own fake 6502 computer!<p>The OK64 hardware supports a 6502 with 64kb of program RAM. In addition to this, the OKVC (OK video chip) supports an additional 1mb Video RAM - and features a handy command interface that the 6502 can use to draw graphic primitives such as polygons, circles and lines. The screen is 256x256 pixels, with a selection of 256 colours from a RGB24 palette. The OK64 also supports a SID chip. </td></tr>
OK64; OK Computer (demo) ; OK64/OkComputer/; <h2>OK Computer</h2><tr><td><img src=":resources/images/tutorials/ok2.png" width="150" class="center"></td><td>The first demo made for the OK64! Presented at Revision 2020.</td></tr>
OK64; OK Operating System (KOS) ; OK64/KOS/; <h2>KOS: OK64 OS Operating system source</h2><p><img src=":resources/images/tutorials/ok3.png" width="300" class="center"><p>Simple source code for the extremely basic KOS - (O)K Operating System.

ATARI2600; Atari 2600 tutorials; ATARI2600/tutorials/;  <h2>Main Atari 2600 tutorials</h2><p><img src=":resources/images/ATARI2600.png" width="200" class="center"><p>Proof-of-concept, but not much else. A couple of test tutorials. Will be expanded upon at a later point.

MEGA65; Main Mega65 tutorials; MEGA65/Tutorials/ ;  <h2>Main Mega65 tutorials</h2><p><img src=":resources/images/tutorials/mega1.png" width="200" class="center"><p>Recommended starting point for anybody interested in coding for the MEGA65.
MEGA65; Mega65 Demoeffects (raytracer); MEGA65/RayTracer/ ;  <h2><p><img src=":resources/images/tutorials/mega2.png" width="200" class="center"><p>The Mega65 demo effect ray tracer tutorials!</h2><p>Under construction.

BBCM; Main BBC Micro tutorials; BBCM/Tutorials/ ;  <h2>Main BBCM tutorials</h2><p><img src=":resources/images/tutorials/bbc1.png" width="200" class="center"><p><p>Main BBC Micro (32k) tutorials.
BBCM; Beep! the demo; BBCM/Beep/ ;  <h2>Beep! the demo</h2><p><img src=":resources/images/beep.png" width="200" class="center"><p>Beep! is multi-part disk-loading demo for the BBC Micro that was made entirely with TRSE. Beep! was released at Deadline 2021.
BBCM; BBC Disk Loading Demo Setup; BBCM/BBCDemoSetup/ ;  <h2>Disk Loading BBC Demo setup sample project</h2><p><img src=":resources/images/tutorials/bbc2.png" width="200" class="center">Make a demo for the BBC that loads independent parts from disk!<p>Loader at $1100, effects at $1280. Plays music, loads effects from disk.




NES; Main NES tutorials; NES/intro_tutorial/;<h2>Main NES tutorials</h2><p><img src=":resources/images/NES.png" width="200" class="center"><p>TRSE currently contains 4 seperate NES example files on how to start building a NES game!
NES; Unit tests; NES/UnitTests/; <h2>TRSE internal unit tests</h2><p>This project contains various unit test files for testing and verifying that the internal 2A03 arithmetic / methods / Dispatcher stuff is working. Which not everything is. Yet. <p>Not complete, still under construction.

SNES; Main SNES tutorials; SNES/tutorials/;<h2>Main SNES tutorials</h2><p><img src=":resources/images/tutorials/cat.png" width="200" class="center"><p>Learn how to code a game for the Super Nintendo System using TRSE! The starting point for everything SNES.
SNES; Red red wine; SNES/redredwine/;<h2>Red Wine</h2><p><img src=":resources/images/tutorials/redwine.png" width="200" class="center"><p>Red Red wine is a small SNES treat covering the famous UB40 song of the same name. By EBrenden.

GAMEBOY; Main Gameboy tutorials; GAMEBOY/tutorials/ ;  <h2>Main Gameboy tutorials</h2><p><img src=":resources/images/GAMEBOY.png" width="200" class="center"><p>Recommended starting point for anybody interested in coding for the Nintendo Gameboy!
GAMEBOY; Yo-grl (demo); GAMEBOY/yo-grl/; <h2>Yo-grl makes a demo</h2><p><tr><td><img src=":resources/images/tutorials/yogrl.png" width="150" class="center"></td><td>Demo that came 2nd at Solskogen 2020. Made by Leuat, 100% TRSE! <p>Full (uncensored) source code + all resources included.</td></tr>
GAMEBOY; Mr. Tibbles; GAMEBOY/mrtibbles/ ;  <h2>Mr. Tibbles</h2><p><img src=":resources/images/tutorials/mrtibbles.png" width="200" class="center"><p>Mr. Tibbles is a sample gameboy project that lets you move a cat around in a level.
GAMEBOY; Unit tests; GAMEBOY/UnitTests/; <h2>TRSE internal unit tests</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>This project contains various unit test files for testing and verifying that the internal Z80 arithmetic / methods / Dispatcher stuff is working. Which not everything is. Yet. <p>Not complete, still under construction.


AMSTRADCPC; Main Amstrad CPC tutorials; AMSTRADCPC/tutorials/;<h2>Main Amstrad CPC</h2><p><img src=":resources/images/AMSTRADCPC.png" width="200" class="center"><p>Amstrad CPC main example files!
AMSTRADCPC; M√∏rketid (demo); AMSTRADCPC/Morketid/;<h2>M√∏rketid</h2><p><img src=":resources/images/morketid.png" width="200" class="center"><p>M√∏rketid is a full Amstrad CPC demo that was made with TRSE. The demo competed at Syntax 2020, and can be found on pouet here : https://www.pouet.net/prod.php?which=87509.<br><br>This project contains the full source code with all resources for the demo.
AMSTRADCPC; SuperSki2021 (text game); AMSTRADCPC/SuperSki2021/;<h2>SuperSki2021</h2><p><img src=":resources/images/superski2021.png" width="200" class="center"><p>SuperSki2021 is a small Amstrad CPC game in text mode (using user defined char) in Mode 1 that was made with TRSE and demonstrates the usage of some Amstrad CPC and z80 units.<br><br>Note: The game is not optimized. This is not a good showcase of what TRSE can achieve!
AMSTRADCPC; Unit tests; AMSTRADCPC/UnitTests/;<h2>Unit tests</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>Z80/CPC unit tests.
SPECTRUM; ZX Spectrum tutorials; SPECTRUM/tutorials/;  <h2>Main ZX Spectrum tutorials</h2><p><p><img src=":resources/images/tutorials/zx.png" width="256" class="center"><p>Main ZX spectrum tutorials in TRSE.
TIM; Main TIM011 tutorials; TIM/tutorials/;<h2>Main TIM011 tutorials</h2><p><img src=":resources/images/TIM.png" width="200" class="center"><p>The TIM-001 is a Serbian Z180 microcomputer that was developed in 1983/84. With its mesmerising 4-colour green palette, excellent 512x256 resolution, wonderful Z180 CPU and a multitide of TRSE libraries/tutorials, there is no reason why you shouldn't start coding for it today!
TIM; Unit tests; TIM/unittests/;<h2>Unit tests</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>Internal TRSE Z180 unit tests
TVC; Main TVC tutorials; TVC/tutorials/;<h2>Main TVC tutorials</h2><p><img src=":resources/images/TVC.png" width="200" class="center"><p>tutorials under construction
VZ200; VZ200 tutorials; VZ200/tutorials/ ;  <h2>Main VZ200 tutorials</h2><p><img src=":resources/images/tutorials/vz200.png" width="200" class="center"><p>Learn how to make stuff for the computer with the objectively most intriguing palette in the world!
VZ200; Millipede; VZ200/millipede/ ;  <h2>Millipede</h2><p><img src=":resources/images/billboard/b31.png" width="200" class="center"><p>The original Centipede game comes to the VZ200!<p>Shoot the Millipede segments to gain points! Heads give higher points than other body pieces.<p>Watch out for the spider bouncing around the screen. Hit it when close to you to get higher points!<p>Shoot the Scorpion before he poisons the mushrooms. If he does, the millipede will go straight to the bottom of the screen where you are!<p>The Flea will come along and add more mushrooms. Shoot him twice to get him!<p>Millipede was written by Jason Oakley / Blue Bilby using Turbo Rascal Syntax Error (TRSE).
VZ200; Small VZ200 TRSE demo; VZ200/TRSEdemo/ ;  <h2>Small VZ200 demo project</h2><p><img src=":resources/images/tutorials/vz200_demo.png" width="200" class="center"><p>Small VZ200 graphics demo

TRS80COCO; Tutorials; TRS80COCO/tutorials/;<h2>TRS80 Coco3 tutorials</h2><p><img src=":resources/images/TRS80COCO.png" width="200" height="200" class="center"><p>Official TRSE tutorials for the TRS80 CoCo3. Under development.
TRS80COCO; Unit tests; TRS80COCO/unittests/;<h2>Unit tests</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>Internal TRSE 6809 unit tests
VECTREX; Main Vectrex examples ; VECTREX/tutorials/; <h2>Main Vectrex tutorials</h2><tr><td><img src=":resources/images/VECTREX.png" width="150" class="center"></td><td><p>Under construction</td></tr>
THOMSON; Thomson mo5 examples ; THOMSON/tutorials/; <h2>Main Thomson MO5 tutorials</h2><tr><td><img src=":resources/images/THOMSON.png" width="150" class="center"></td><td><p>Under construction</td></tr>
THOMSON; Thomson mo6 examples ; THOMSON/mo6_tutorials/; <h2>Main Thomson MO6 tutorials</h2><tr><td><img src=":resources/images/THOMSON.png" width="150" class="center"></td><td><p>Under construction</td></tr>

MSX; Main MSX tutorials; MSX/Tutorials/;<h2>Main MSX tutorials</h2>To do. Let us know if you have experience with this computer, and are willing/able to create some libraries+example files!

AMIGA; Main Amiga 500 tutorials; AMIGA/tutorials/;<h2>Main Amiga 500 tutorials</h2><p>The main Amiga 500 tutorials in TRSE<p><img src=":resources/images/AMIGA.png" width="256" class="center"><p>TRSE currently containts 8 stand-alone Amiga 500 example files, ranging from sprite handling to bitplane manipulation, 3D and text rendering. <p>More tutorials to come soon!
AMIGA; Hopscotch (demo) ; AMIGA/hopscotch/;<h2>Hopscotch</h2><img src=":resources/images/tutorials/hopscotch.png" width="200" height="200" class="center"><p>Hopscotch is an Amiga 500 OCS demo made by Proxima. Full source + resources, just press ctrl+B to build! Released at Black Valley demoparty 2022.
AMIGA; Amiga small intro; AMIGA/small_intro/;<h2>Amiga 500 small intro</h2><p><img src=":resources/images/amiga_intro.png" width="320" class="center">A small Amiga 500 intro made with TRSE!
ATARI520ST; Main Atari 520 ST tutorials; ATARI520ST/tutorials/;<h2>Main Atari 520 ST tutorials</h2><p>The main Atari ST 520 tutorials in TRSE<p><img src=":resources/images/ATARI520ST.png" width="300" class="center"><p>TRSE currently containts 5 stand-alone Atari ST example files, all being demo-oriented.  <p>More tutorials to come soon!
ATARI520ST; Atari 520 Unit tests; ATARI520ST/unittests/; <h2>TRSE internal unit tests for the m68k</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>This project contains various unit test files for testing and verifying that the compiler is working as it should.






ACORN; Acorn atom tutorials; Acorn/tutorials/ ;  <h2>Acorn Atom tutorials</h2><p><img src=":resources/images/ACORN.png" width="200" class="center">Under construction.
ATARI800; Main Atari800 tutorials; ATARI800/Tutorials/ ;  <h2>Main Atari 800 tutorials</h2><p><p>To do. Let us know if you have experience with this computer, and are willing/able to create some libraries+example files!
APPLEII; Main Apple II tutorials; APPLEII/tutorials/ ;  <h2>Main Apple II tutorials</h2><p><p>Under construction. Let us know if you have experience with this computer, and are willing/able to create some libraries+example files!



TIKI100; Tiki 100 tutorials; TIKI100/tutorials/;  <h2>Main TIKI 100 tutorials</h2><p><img src=":resources/images/TIKI100.png" width="300" class="center">The TIKI 100 was a little-known (and failed) 1980s computer from Norway. A perfect match for TRSE!<br><br>  Proof-of-concept that the Z80 works, but not much else. A couple of test tutorials. Will be expanded upon at a later point.
TRS80; TRS-80 tutorials; TRS80/tutorials/;  <h2>Main TRS-80 tutorials</h2><p><img src=":resources/images/TRS80.png" width="200" class="center"><p>TRS-80 z80 tutorials. Work in progress!<p>Let us know if you're interesting in writing some example files / libraries


X86; IBM 8086 AT (CGA) tutorials; X86/CGA/; <h2>Main IBM AT (CGA) tutorials</h2><p><img src=":resources/images/tutorials/dos1.png" width="200" class="center"><p>Preliminary X86 DOS tutorials for the IBM XT with CGA running at 4.77 mhz. Extremely early development, compiler is totally incomplete and inefficient. <p>Proof of concept.
X86; X86 Simple OS; X86/X86-OS/; <h2>Write your own X86 OS using TRSE</h2><p><img src=":resources/images/tutorials/dos2.png" width="200" class="center"><p>Did you know that it is possible to write a fully functional i386-X86 OS using TRSE? In this single tutorial, we show you how.
X86; VGA (386) + Adlib tutorials; X86/VGA_386/; <h2>Main 386 VGA + Adlib player tutorials</h2><p><img src=":resources/images/tutorials/dos3.png" width="200" class="center"><p>386 VGA + Adllib DOS tutorials.
X86; Unit tests; X86/unittests/;<h2>Unit tests</h2><p><img src=":resources/images/tutorials/units.png" width="200" height="200" class="center"><p>TRSE X86 internal Unit tests

WONDERSWAN; Main Wonderswan examples ; WONDERSWAN/tutorials/; <h2>Main Wonderswan tutorials</h2><tr><td><img src=":resources/images/WONDERSWAN.png" width="150" class="center"></td><td><p>WIP </td></tr>

POKEMONMINI; Main Pokemon Mini tutorials; POKEMONMINI/tutorials;<h2>Main Pokemon Mini tutorials</h2><p>Please note that this compiler is a work in progress!
JDH8; Main JDH8 examples ; JDH8/tutorials/; <h2>Main JDH8 tutorials</h2><tr><td><img src=":resources/images/JDH8.png" width="150" class="center"></td><td><p>See https://www.youtube.com/watch?v=vaGZapAGvwM. Still very much experimental. Check out the video! </td></tr>
CHIP8; Main Chip8 examples ; CHIP8/tutorials/ ; <h2>Main chip8 tutorials</h2><p><img src=":resources/images/JDH8.png" width="150" class="center"><br><p>Under construction.. only assembler stuff as of now


CrossPlatform; Grave Intentions; CrossPlat/GraveIntentions; <h2>Grave Intentions</h2><p><img src=":resources/images/tutorials/grave_intentions.png" width="300"><p>A C64/VIC-20/PET/PLUS4 cross-platform text-based adventure engine/ game. Still under construction.
CrossPlatform; Cross platform text mode tutorials; CrossPlat/txt_tutorials/ ;  <h2>Main TRSE cross-platform text mode tutorials</h2><p><img src=":resources/images/tutorials/crossplatform.png" width="300" class="center"><p>


