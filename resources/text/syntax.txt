#    
#    
#    M E T H O D S 
#
#
# format : method name, compatibility list, parameters
# s = string
# b = byte
# i = integer
# a = address
# n = pure number
# ib = integer or byte
# p = procedure
# ai = address OR integer

# init functions
m; initrandom; C64, PLUS4, C128 ;
m; initrandom256; C64, PLUS4, C128, VIC20 ;
m; initsinetable; C64, PLUS4, C128, VIC20, PET,  PET;
m; DefineScreen; C64, PLUS4, C128, VIC20, PET, NES ;
m; initmoveto; C64, PLUS4, C128, VIC20, PET,  NES ;
m; initprintdecimal; C64, PLUS4, C128, VIC20, PET,  NES ;
m; initeightbitmul; C64, PLUS4, C128, VIC20, PET,  NES ;
m; init16x8mul; C64, PLUS4, C128, VIC20, PET,  NES ;
m; init16x8div; C64, PLUS4, C128, VIC20, PET,  NES ;
m; init8x8div; C64, PLUS4, C128, VIC20, PET,  NES ;
m; initprintstring; C64, PLUS4, C128  ;
m; initjoystick; C64, PLUS4, C128, VIC20  ;
m; initatan2; C64, PLUS4, C128, VIC20  ;
m; initdrawtextbox; C64, PLUS4, C128, VIC20 ;





# ************** AMIGA ROUTINES

# *** INIT METHODS

m; InitMatmul3x3; Amiga;
m; InitPoly; Amiga;
m; InitLine; Amiga;
m; InitMatmulVec; Amiga;
m; InitMatmulVecNormalZ; Amiga;
m; InitProjectToScreen; Amiga;
m; InitP61PlayerInternal; Amiga;


# ** CALL METHODS

m; InitP61Module; Amiga;a
m; PlayP61Module; Amiga;
m; Poke8; Amiga ; a,i,b
m; Poke16; Amiga ; a,i,i
m; Poke32; Amiga ; a,i,l
m; WaitVerticalBlank; Amiga;
m; SetCopperList32; Amiga; a, a
m; ApplyCopperList; Amiga;
m; memcpy; Amiga; a, l,a,l, l
m; setpalette; Amiga; a, a, l
m; ablit; Amiga; a,a,i, i,i,i,i,l,i,i,i
m; fblit; Amiga; a,a,i, i,i,i,i,l,i,i,i

m; EnableInterrupt; Amiga;i

m; InitCustomCopperList; Amiga;
m; EndCustomCopperList; Amiga;
m; AddCopperCommand; Amiga; i,i
m; SkipCopperCommands; Amiga; i
m; DrawLine; Amiga; i,i,i,i, l, i
m; Fill; Amiga ; a, l, l
m; MatMul3x3; Amiga; a,a,a
m; SetRotationX; Amiga; a, l,l
m; SetRotationY; Amiga; a, l,l
m; SetRotationZ; Amiga; a, l,l
m; SetIdentity; Amiga; a
m; MatMulVec; Amiga; a,a,a,i
m; MatMulVecNormalZ; Amiga; a,a,a,i
m; MatMulVecNormal; Amiga; a,a,a,i
m; ProjectToScreen; Amiga; a,i,l,l
m; WaitForBlitter; Amiga;
m; VBIRQ;Amiga; p


#Memory routines
m; Poke; C64, PLUS4, C128, VIC20, PET,  NES ; a,b,b
m; Peek; C64, PLUS4, C128, VIC20, PET,  NES ; a,b
m; ToggleBit; C64, PLUS4, C128, VIC20, PET,  NES ; a,b,b
m; GetBit; C64, PLUS4, C128, VIC20, PET,  NES ; a,b
m; EnableAllRam; C64, PLUS4  ;
m; MemCpy; C64, PLUS4, C128, VIC20, PET,  NES ; a,b,a,b
m; MemCpyFast; C64, PLUS4, C128, VIC20, PET,  NES ; a,b,a,b
m; MemCpyUnroll; C64, PLUS4, C128, VIC20, PET,  NES ; a,b,a,b
m; BlockMemCpy; C64, PLUS4, C128, VIC20, PET,  NES ; a,a,n
m; Inc; C64, PLUS4, C128, VIC20, PET,  NES ; a
m; Dec; C64, PLUS4, C128, VIC20, PET,  NES ; a
m; Fill; C64, PLUS4, C128, VIC20, PET,  NES ; a, b, b
m; SetMemoryConfig ; C64, PLUS4,  VIC20, PET,  NES ; b,b,b
m; CopyHalfScreen; C64, PLUS4, C128, VIC20, PET,  NES ; a,a,b,b,n
m; CopyFullScreen; C64, PLUS4, C128, VIC20, PET,  NES ; a,a

M; CopyBytesShift; C64, PLUS4,C128, VIC20, PET,  NES; a,a,b,b,n

m; CreateAddressTable; C64, PLUS4,C128, VIC20, PET, NES; a,n,b,b
m; AddressTable; C64, PLUS4,C128, VIC20, PET, NES; a,b,b

m; Nop; C128, C64, PLUS4, VIC20, PET, NES; n

m; SetMemoryConfig ; C128 ; n,n,n,n,n


m; Decrunch; C64, PLUS4, C128, VIC20 ; a
m; DecrunchFromIndex; C64, PLUS4, C128, VIC20 ; a,b

m; IncZP; C64, PLUS4, C128, VIC20, PET,  NES ; a, b
#m; DecZP; C64, PLUS4, C128, VIC20, PET,  NES ; a, b

# Charset routines

m; CopyCharsetFromRom; C64, PLUS4, C128 ; a
m; SetCharsetLocation; C64, PLUS4, C128, VIC20; n
m; SetScreenLocation; C64, PLUS4, C128, VIC20; n

# **********************
#
# NES stuff:
#
# **********************
m; LoadPalette; NES; a
m; ReadInput; NES;
m; PPUBackgroundDump; NES; a,b,b
m; PPUAttributeDump; NES; a,b,b
m; PPUSingle; NES; b,b,b
m; LoadSong; NES; b
m; PlaySong; NES;
m; PPUDrawColumn; NES; a,b,b,b
m; ToggleNMI; NES; n
m; ToggleVRAM32Inc; NES; n
m; ToggleSpriteTableAddress; NES; n
m; ToggleBackgroundTableAddress; NES; n
m; SetNameTable; NES; b
m; ToggleGreyscale; NES; n
m; ToggleSprites; NES; n
m; ToggleBackground; NES; n
m; ToggleBorderSprites; NES; n
m; ToggleBorderBackground; NES; n
m; SetSpriteLocation; NES; b
m; Split; NES;
m; Scroll; NES; b,b
m; ToggleSpriteSize; NES; n


# IO

m; KrillLoad; C64, PLUS4; a
m; KrillLoadCompressed; C64, PLUS4; a
m; InitKrill; C64, PLUS4;

# Screen routines
# m; Writeln; C64, PLUS4, C128, VIC20, PET,  NES ; s,b

m; Tile; C64, PLUS4, C128, VIC20, PET ; a,a,a,a,b,n
m; MoveTo; C64, PLUS4, C128, VIC20, NES ; b,b,b
m; ScrollY; C64, PLUS4, C128 ; b
m; ScrollX; C64, PLUS4, C128 ; b
m; hideborderx; C64, PLUS4, C128 ; b
m; hidebordery; C64, PLUS4, C128 ; b
m; PrintString; C64, PLUS4, C128, VIC20, PET,  PET; s,b,b
m; PrintNumber; C64, PLUS4, C128, VIC20, PET,  PET; b
m; PrintDecimal; C64, PLUS4, C128, VIC20, PET,  PET; i,n
m; ClearScreen; C64, PLUS4, C128, VIC20, NES, PET; b, a
m; ClearBitmap; C64, PLUS4, C128; a, b
m; SetMultiColorMode; C64, PLUS4, C128;
m; SetRegularColorMode; C64, PLUS4, C128;
m; SetBitmapMode; C64, PLUS4, C128;
m; SetTextMode; C64, PLUS4, C128;
m; SetBank; C64, PLUS4, C128; b
m; ScreenOff; C64, PLUS4, C128;
m; ScreenOn; C64, PLUS4, C128;
m; CopyImageColorData; C64, PLUS4, C128; a,n
m; Lo; C64, PLUS4, C128, NES, VIC20; a
m; Hi; C64, PLUS4, C128, NES, VIC20; a
m; CreateInteger; C64, PLUS4, C128, NES, VIC20; b,b
m; CreatePointer; C64, PLUS4, C128, NES, VIC20; b,b
# DrawTextBox params: screenaddrtbl,petsciiarray,column,row,width,height
m; DrawTextBox; C64, PLUS4, C128, NES, VIC20; a,a,b,b,b,b
# DrawColorTextBox params: screenaddrtbl,coloraddrtbl,petsciiarray,column,row,width,height,color
m; DrawColorTextBox; C64, C128, NES, VIC20; a,a,a,b,b,b,b,b

# Sprite routines

m; SpritePos; C64, PLUS4, C128 ; ib,b,b
m; SetSpriteLoc; C64, PLUS4, C128; b,b,n

# Sound/Music routines




m; PlaySound; C64, PLUS4, C128; b,b,b,b,b,b,b
m; SetFrequency; C64, PLUS4, C128; b,b
m; InitSid; C64, PLUS4, C128,VIC20; a
m; ClearSound; C64, PLUS4, C128;

# VIC 20 Music routines
m; InitModPlayer; VIC20; b,b
m; PlayMod; VIC20;
m; PlayVIC20Sid; VIC20; a


# Math routines

m; Atan2 ; C64, PLUS4, C128, VIC20, PET,  NES  ; b,b,b,b
m; Sqrt ; C64, PLUS4, C128, VIC20, PET,  NES  ; ib
m; Swap; C64, PLUS4, C128, VIC20, PET,  NES; b,b
m; Abs;  C64, PLUS4, C128, VIC20, PET,  NES;ib
m; Rand; C64, PLUS4, C128 ; b,b,b
m; Random; C64, PLUS4, C128, VIC20;



# Collision routines
m; IsOverlapping; C64, PLUS4, C128, VIC20, PET, NES; b,b,b,b,b
m; IsOverlappingWH; C64, PLUS4, C128, VIC20, PET, NES; b,b,b,b,b,b

# Other routines

m; Wait; C64, PLUS4, C128, VIC20, PET,  NES ; b
m; Jammer; C64, PLUS4, C128  ; n,n
m; FLD ; C64, PLUS4, C128 ; b,n
m; TransformColors; C64, PLUS4, C128; a,a
m; Call; C64, PLUS4, C128, VIC20, PET,  NES; a
m; Loop; C64, PLUS4, C128, VIC20, PET,  NES;
m; Return;  C64, PLUS4, C128, VIC20, PET,  NES, AMIGA;
m; Set2MhzMode; C128;
m; Set1MhzMode; C128;
m; RightBitShift; C64, PLUS4, C128, VIC20, PET,  NES; a, n
m; LeftBitShift; C64, PLUS4, C128, VIC20, PET,  NES; a, n

# IO ports

m; Joystick; C64, PLUS4, C128, VIC20; n
m; Keypressed; C64, PLUS4, C128, VIC20; b


# IRQ routines

m; NmiIRQ; C64, PLUS4, C128, VIC20, PET,  PET ; p
m; EnableRasterIRQ; C64, PLUS4, C128;
m; StartIRQ; C64, PLUS4, C128, VIC20, PET,  NES; b
m; StartIRQWedge; C64, PLUS4, C128; b
m; StartRasterChain; C64, PLUS4, C128; p,b,n
m; CloseIRQ; C64, PLUS4, C128, VIC20, PET,  NES;
m; CloseIRQWedge; C64, PLUS4, C128;
m; EnableIRQ; C64, PLUS4, C128;
m; PreventIRQ; C64, PLUS4, C128;
m; DisableCIAInterrupts; C64, PLUS4, C128;
m; RasterIRQ; C64, PLUS4, C128 ; p,b,n
m; RasterIRQWedge; C64, PLUS4, C128 ; p,b,n
m; ReturnInterrupt; C64, PLUS4, C128;


m; WaitForRaster; C64, PLUS4, C128, VIC20; b
m; WaitNoRaster; C64, PLUS4, C128, VIC20; b

m; DisableVIC20IRQ; VIC20;
#m; StartVIAIRQ; VIC20;
#m; CloseVIAIRQ; VIC20;
m; VIAIRQ; VIC20; p,b,b









#
#
#
#  C O N S T A N T S
#
#
#

c; TRUE; NES, C64, PLUS4,VIC20,C128,PET, AMIGA; b; 1
c; FALSE; NES, C64, PLUS4,VIC20,C128,PET, AMIGA; b; 0


# NES-specific

c; PPUCTRL; NES; a; $2000
c; PPUMASK; NES; a; $2001
c; PPUSTATUS; NES; a; $2002
c; OAMADDR; NES; a; $2003
c; OAMDATA; NES; a; $2004
c; PPUSCROLL; NES; a; $2005
c; PPUADDR; NES; a; $2006
c; PPUDATA; NES; a; $2007
c; OAMDMA; NES; a; $4014



# VIC 20-specific constants
c; PAL_OR_NTSC;VIC20; a; $ede4
c; SCREEN_COL_LOC; VIC20; a; $9600, $9400
c; SCREEN_CHAR_LOC; VIC20; a; $1E00, $1000
c; HSCROLL_REGISTER; VIC20; a; $9000
c; VSCROLL_REGISTER; VIC20; a; $9001
c; SCREEN_TEXT_WIDTH; VIC20; a; $9002
c; SCREEN_TEXT_HEIGHT; VIC20; a; $9003
c; VIC_RASTERLINE; VIC20; a; $9004
c; VIC_DATA_LOC; VIC20; a; $9005
c; SCREEN_CHAR_REGISTER; VIC20; a; $9005
c; HPEN_REGISTER; VIC20; a; $9006
c; VPEN_REGISTER; VIC20; a; $9007
c; XPADDLE_REGISTER; VIC20; a; $9008
c; YPADDLE_REGISTER; VIC20; a; $9009
c; SOUND1_REGISTER; VIC20; a; $900A
c; SOUND2_REGISTER; VIC20; a; $900B
c; SOUND3_REGISTER; VIC20; a; $900C
c; SOUNDFX_REGISTER; VIC20; a; $900D
c; AUX_COLOR_AND_VOLUME; VIC20; a; $900E
c; SCREEN_BG_COLOR; VIC20; a; $900F





# C64, PLUS4, C128-specific constants
c; SCREEN_BG_COL; C64, PLUS4, C128; a; $D020
c; SCREEN_FG_COL; C64, PLUS4, C128; a; $D021
c; SCREEN_CHAR_LOC; C64, PLUS4, C128; a; $0400
c; SCREEN_COL_LOC; C64, PLUS4, C128; a; $D800
c; RASTERLINE_POS; C64, PLUS4, C128; a; $D012
c; BLACK; C64, PLUS4, C128, VIC20; b; 0
c; WHITE; C64, PLUS4, C128, VIC20; b; 1
c; RED  ; C64, PLUS4, C128, VIC20;b;2
c; CYAN; C64, PLUS4, C128, VIC20; b;3
c; PURPLE; C64, PLUS4, C128, VIC20; b;4
c; GREEN; C64, PLUS4, C128, VIC20; b;5
c; BLUE; C64, PLUS4, C128, VIC20; b;6
c; YELLOW; C64, PLUS4, C128, VIC20; b;7
c; ORANGE; C64, PLUS4, C128; b;8
c; BROWN; C64, PLUS4, C128; b;9
c; LIGHT_RED; C64, PLUS4, C128; b;10
c; DARK_GREY; C64, PLUS4, C128; b;11
c; GREY; C64, PLUS4, C128; b;12
c; LIGHT_GREEN; C64, PLUS4, C128;b;13
c; LIGHT_BLUE; C64, PLUS4, C128; b;14
c; LIGHT_GREY; C64, PLUS4, C128; b;15
c; SPRITE_POS; C64, PLUS4, C128; a; $D000
c; SPRITE_DATA_LOC; C64, PLUS4, C128; a;$07F8
c; SPRITE_BITMASK; C64, PLUS4, C128; a; $D015
c; SPRITE_COLOR; C64, PLUS4, C128;a;$D027
c; SPRITE_DATA; C64, PLUS4, C128; a; $0340
c; SPRITE_COLLISION; C64, PLUS4, C128;a;$D01E
c; SPRITE_BG_COLLISION; C64, PLUS4, C128;a;$D01F
c; SPRITE_STRETCH_X; C64, PLUS4, C128;a;$D01D
c; SPRITE_STRETCH_Y; C64, PLUS4, C128;a;$D017

c; KEY_A; C64, PLUS4, C128, VIC20; b;$01
c; KEY_B; C64, PLUS4, C128, VIC20; b;$02
c; KEY_C; C64, PLUS4, C128, VIC20; b;$03
c; KEY_D; C64, PLUS4, C128, VIC20; b;$04
c; KEY_E; C64, PLUS4, C128, VIC20; b;$05
c; KEY_F; C64, PLUS4, C128, VIC20; b;$06
c; KEY_G; C64, PLUS4, C128, VIC20; b;$07
c; KEY_H; C64, PLUS4, C128, VIC20; b;$08
c; KEY_I; C64, PLUS4, C128, VIC20; b;$09
c; KEY_J; C64, PLUS4, C128, VIC20; b;$0A
c; KEY_K; C64, PLUS4, C128, VIC20; b;$0B
c; KEY_L; C64, PLUS4, C128, VIC20; b;$0C
c; KEY_M; C64, PLUS4, C128, VIC20; b;$0D
c; KEY_N; C64, PLUS4, C128, VIC20; b;$0E
c; KEY_O; C64, PLUS4, C128, VIC20; b;$0F
c; KEY_P; C64, PLUS4, C128, VIC20; b;$10
c; KEY_Q; C64, PLUS4, C128, VIC20; b;$11
c; KEY_R; C64, PLUS4, C128, VIC20; b;$12
c; KEY_S; C64, PLUS4, C128, VIC20; b;$13
c; KEY_T; C64, PLUS4, C128, VIC20; b;$14
c; KEY_U; C64, PLUS4, C128, VIC20; b;$15
c; KEY_V; C64, PLUS4, C128, VIC20; b;$16
c; KEY_W; C64, PLUS4, C128, VIC20; b;$17
c; KEY_X; C64, PLUS4, C128, VIC20; b;$18
c; KEY_Y; C64, PLUS4, C128, VIC20; b;$19
c; KEY_Z; C64, PLUS4, C128, VIC20; b;$1A
c; KEY_0; C64, PLUS4, C128, VIC20; b;$30
c; KEY_1; C64, PLUS4, C128, VIC20; b;$31
c; KEY_2; C64, PLUS4, C128, VIC20; b;$32
c; KEY_3; C64, PLUS4, C128, VIC20; b;$33
c; KEY_4; C64, PLUS4, C128, VIC20; b;$34
c; KEY_5; C64, PLUS4, C128, VIC20; b;$35
c; KEY_6; C64, PLUS4, C128, VIC20; b;$36
c; KEY_7; C64, PLUS4, C128, VIC20; b;$37
c; KEY_8; C64, PLUS4, C128, VIC20; b;$38
c; KEY_9; C64, PLUS4, C128, VIC20; b;$39

c; KEY_F1; C64, PLUS4, C128, VIC20; b;$F1
c; KEY_F3; C64, PLUS4, C128, VIC20; b;$F3
c; KEY_F5; C64, PLUS4, C128, VIC20; b;$F5
c; KEY_F7; C64, PLUS4, C128, VIC20; b;$F7

c; KEY_PLUS; C64, PLUS4, C128, VIC20; b;$2b
c; KEY_POUND; C64, PLUS4, C128, VIC20; b;$1c
c; KEY_ENTER; C64, PLUS4, C128, VIC20; b;$F0
c; KEY_ASTERIX; C64, PLUS4, C128, VIC20; b;$2a
c; KEY_SEMI; C64, PLUS4, C128, VIC20; b;$3b
c; KEY_HOME; C64, PLUS4, C128, VIC20; b;$EF
c; KEY_SPACE; C64, PLUS4, C128, VIC20; b;$20
c; KEY_COMMODORE; C64, PLUS4, C128, VIC20; b;$EE
c; KEY_COLON; C64, PLUS4, C128, VIC20; b;$3a
c; KEY_EQUALS; C64, PLUS4, C128, VIC20; b;$3d

c; SPRITE_MULTICOLOR; C64, PLUS4, C128;a;$D01C
c; SPRITE_MULTICOLOR_REG1; C64, PLUS4, C128;a;$D025
c; SPRITE_MULTICOLOR_REG2; C64, PLUS4, C128; a;$D026
c; MULTICOLOR_CHAR_COL; C64, PLUS4, C128;a;$D021
c; SID_TRI; C64, PLUS4, C128;b;16
c; SID_SAW; C64, PLUS4, C128;b;32
c; SID_PULSE; C64, PLUS4, C128;b;64
c; SID_NOISE; C64, PLUS4, C128;b;128
c; SID_CHANNEL1; C64, PLUS4, C128;b;0
c; SID_CHANNEL2; C64, PLUS4, C128;b;7
c; SID_CHANNEL3; C64, PLUS4, C128;b;14
c; SID; C64, PLUS4, C128;a;$D400
c; VIC_BANK0; C64, PLUS4, C128; b;3
c; VIC_BANK1; C64, PLUS4, C128;b;2
c; VIC_BANK2; C64, PLUS4, C128;b;1
c; VIC_BANK3; C64, PLUS4, C128;b;0
c; VIC_DATA_LOC; C64, PLUS4;a;$d018

c; COPPER_SCROLL; AMIGA;i; $0102
c; COPPER_WAIT_FOR_RASTER; AMIGA; i; $FFFE
c; COPPER_PALETTE_START; AMIGA;i; $0180
c; COPPER_MODULO_EVEN; AMIGA;i; $0108
c; COPPER_MODULO_ODD; AMIGA;i; $010A
c; COPPER_IRQ; AMIGA; i; %00010000
c; VB_IRQ; AMIGA; i; %00100000
c; BLITTER_IRQ; AMIGA; i; %01000000


# C128 schtøff

c; VIC_DATA_LOC; C128;a;$0A2C
c; MMU ; C128 ; a ; $FF00
c; SWAPPER; C128; a; $FF5F

m; VDCInit; C128; b
m; VDCWrite; C128; b, b
m; Go80Columns; C128;
m; initmoveto80; C128;
m; moveto80; C128; b,b,b
m; print80; C128; a,b
m; fill80; C128; b,b



#
#
#
#
#   R E S E R V E D      W O R D S
# 
#
#
#

r; BEGIN; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; END; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; VAR; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; PROGRAM; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; INTEGER; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; LONG; AMIGA
r; PROCEDURE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; IF; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; THEN; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; FOR; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; FORI; C64, PLUS4, C128, VIC20, PET, NES, BBCM, AMIGA
r; TO; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; DO; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; WHILE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; ARRAY; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; OF; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; BYTE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; INCBIN; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; STRING; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; CSTRING; C64, PLUS4, C128, VIC20, PET,  BBCM, AMIGA
r; ASM; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; INCSID; C64, PLUS4, C128, VIC20, PET,  NES
r; INCNSF; NES
r; INTERRUPT; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; ELSE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; OR; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; AND; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; POINTER; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; AT; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; INCLUDE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; USERDATA; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; IFDEF; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; DEFINE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; IFNDEF; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; ENDIF; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; OFFPAGE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; ONPAGE; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; STEP; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; UNROLL; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; STARTBLOCK; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; ENDBLOCK; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; IGNOREMETHOD; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; ERROR; C64, PLUS4, C128, VIC20, PET,  NES, BBCM, AMIGA
r; WEDGE; C64, PLUS4, C128
r; USE; C64, PLUS4, C128, VIC, BBCM, AMIGA
r; STARTASSEMBLER; C64, PLUS4, C128, VIC, BBCM, AMIGA
r; DONOTREMOVE; C64, PLUS4, C128, VIC, BBCM, AMIGA
r; CASE; C64, PLUS4, C128, VIC, BBCM, NES, AMIGA

r; CHIPMEM; AMIGA




#
#
#
#
#   P L A T F O R M   I N F O
#
#
#
#
p; Getting_Started; C64, PLUS4, C128, VIC20, PET, NES, BBCM, AMIGA
p; Vic20; VIC20
p; C64, PLUS4; C64, PLUS4
p; Pascal; C64, PLUS4, C128, VIC20, PET, NES, BBCM, AMIGA
p; Constants; C64, PLUS4, C128, VIC20, PET, NES, BBCM, AMIGA
p; Variables; C64, PLUS4, C128, VIC20, PET, NES, BBCM, AMIGA
p; Screen; C64, PLUS4, VIC20


#
#
#   F J O N G   R A Y   T R A C E R
#
#
#
f ; AddObject; s,s,s,s, f,f,f,f,f,f
f ; SetRotation; s,f,f,f
f ; SetPosition; s,f,f,f
f ; AddPosition; s,f,f,f

