unit Random;
var

@donotremove Random1

/**
	Generates 16-bit random number
**/
function Random1() : integer;
begin
	asm("
; 16-bit xorshift pseudorandom number generator by John Metcalf
; 20 bytes, 86 cycles (excluding ret)

; returns   hl = pseudorandom number
; corrupts   a

; generates 16-bit pseudorandom numbers with a period of 65535
; using the xorshift method:

; hl ^= hl << 7
; hl ^= hl >> 9
; hl ^= hl << 8

; some alternative shift triplets which also perform well are:
; 6, 7, 13; 7, 9, 13; 9, 7, 13.


xrnd:
  ld hl,1       ; seed must not be 0

  ld a,h
  rra
  ld a,l
  rra
  xor h
  ld h,a
  ld a,l
  rra
  ld a,h
  rra
  xor l
  ld l,a
  xor h
  ld h,a

  ld (xrnd+1),hl

	");

end;


/**
	Generates 8-bit random number
**/
function RandomByte(): byte;
begin
	asm("
		call Random_Random1;
		xor l
	");
end;
	

/**
	Sets seed for random number generator
**/
procedure SetSeed(seed: integer);
begin
	asm("
		ld hl,Random_seed
 		ld (xrnd+1),hl
	");
end;


/**
	Sets seed for random number generator from R register
**/
procedure SetRSeed();
begin
	asm("
		ld a,r
 		ld (xrnd+1),a
	");
end;

end.
