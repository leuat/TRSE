unit System;
@use "memory"
var
	src, dst : pointer;
	len : integer;
	@donotremove firmware
	firmware : integer;
	firmware_enabled : byte = 1;
	firmware_oldstate : byte = 0;


/**
Saves the firmware interrupt handler for future use.
**/
procedure SaveFirmware();
begin
asm("
 di
 ld   hl, ($38+1)   ;; [5] Obtain pointer to the present interrupt handler
 ld [Memory_firmware],hl
 ei                             ;; [1]
");
end;
	
/**
Disables firmware by setting the firmware interrupt handler to RET. Remember to save the original
handler with "SaveFirmware" if you plan to restore it at a later point. 
**/	
procedure DisableFirmware();
begin
//	if (firmware_enabled=false) then 
//		return();
asm("
 di

 im   1                        ;; [2] Set Interrupt Mode 1 (CPU will jump to 0x38 when a interrupt occurs)
 ld   hl, $C9FB               ;; [3] FB C9 (take into account little endian) => EI : RET

 ld ($38), hl      
 ei                             
 
");
	firmware_enabled := false;
end;


/**
Enables firmware handling by restoring the firmware interrupt. 

**/

procedure EnableFirmware();
begin
	if (firmware_enabled=true) then return();
asm("
    ld hl,[Memory_firmware]
    di            
   ld a,$C3       
   ld ($38), a    
   ld ($38+1), hl 
   ei
	");
	firmware_enabled := true;

end;


procedure RequireFirmware();
begin
	if (firmware_enabled = 0) then
	begin
		firmware_oldstate := 0;
		EnableFirmware();
	end;
end;

procedure RestoreFirmwareState();
begin
	if (firmware_oldstate = 0) then
		DisableFirmware()
	else
		EnableFirmware();

end;

/**
Pushes all registers (both pairs) onto the stack. Typically used in interrupts.
**/
procedure PushAll() inline;
begin
	asm("
	push af
	push bc
	push de
	push hl
	push ix
	push iy
	exx
	push af
	push bc
	push de
	push hl
	push ix
	push iy
	exx
	");
end;

/**
Pops all registers (both pairs) from the stack. Typically used in interrupts.
**/
procedure PopAll() inline;
begin
	asm("
	exx
	pop iy
	pop ix
	pop hl
	pop de
	pop bc
	pop af
	exx
	pop iy
	pop ix
	pop hl
	pop de
	pop bc
	pop af

	");
end;
/**
Turns on interrupts. Same as "ei"
**/
procedure EnableInterrupts() inline;
begin
	asm(" ei");
end;

/**
Turns off interrupts. Same as "di"
**/
procedure DisableInterrupts() inline;
begin
	asm(" di");
end;

/**
Enables access to ROM, both upper ($C000-$FFFF) and lower ($0000-$4000)
**/
procedure EnableRom();
begin
	asm(" call $B900 ");
	asm(" call $B906 ");
end;
/**
Disables access to ROM, both upper ($C000-$FFFF) and lower ($0000-$4000)
**/
procedure DisableRom();
begin
	asm(" call $B903 ");
	asm(" call $B909 ");
end;

/**
Disables access to lower ROM ($0000-$4000)
**/
procedure EnableLRom();
begin
	asm(" call $B906 ");
end;
/**
Disables access to lower ROM ($0000-$4000)
**/
procedure DisableLRom();
begin
	asm(" call $B909 ");
end;


procedure VSync();
begin
	asm("
	ei
    nop
    halt
    di
	");	
end;

end.
