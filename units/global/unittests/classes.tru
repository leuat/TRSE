Unit Classes;
var

	StrItem = class
		a: byte;
		@ifndef X86
		str: integer;
		@endif
		@ifdef X86
		str: pointer;
		@endif
		b : integer;
		function getValue() : integer;
		begin
//			Common::DebugValue(this.str);
			StrItem::getValue := this.str;
		end;
		
		procedure Init( ss1 : integer);
		begin
			this.str := ss1;
		end;
		procedure MulTest1();
		begin
			this.b:=this.b*this.a;
		end;
		procedure MulTest2();
		begin
			this.b:=this.a*this.b;
		end;
		procedure DivTest1();
		begin
			this.b:=this.b/this.a;
		end;
//		c : array[3] of byte;
	end;
	s1 : StrItem;	
	ps1 : pointer of StrItem;

		
	StringList = class
		items : array[16] of StrItem;	
		curLen: byte;

		function getLenSomething() : byte;
		begin
			StringList::getLenSomething := this.curLen+this.curLen*2;
//			returnValue(this.curLen);
		end;

		
		procedure Add(zp:pointer);
		begin
			this.items[ this.curLen ].str := zp;
			this.curLen+=1;
		end;
		
		procedure Stuff();
		begin
			Vars::v1 := this.getLenSomething();
		end;
		
	
	end;
	sl: StringList;	
	text : string=("TEXT");



/*--------------------------------------------------------------------------------------------

	UNIT TESTS
	
----------------------------------------------------------------------------------------------*/

// Direct assignment
procedure CTest1();
begin
	Vars::text := "T1:";
	Vars::m.y := 10;
	if (Vars::m.y=10) then Common::PASS() else Common::FAIL();
end;

// Direct access 
procedure CTest2();
begin
	Vars::m.x := 100;
	Vars::m.Move1(Vars::m.x+10,0);
	Vars::m.y := Vars::m.x;
	Vars::text := "T2:";
	if (Vars::m.y=110) then Common::PASS() else Common::FAIL();
end;

/*
  Test pointers, indirect assignment
*/
procedure CTest3();
begin
	Vars::text := "T3:";
	Vars::pm:=#Vars::monsters[8];	
	Vars::zp:=#Vars::monsters + (sizeof(Vars::Monster)*8);
	Vars::pm.x := 10;
	Vars::pm.byteData[3]:=2;
@ifndef ATARI520ST	
	Vars::j := Vars::zp[(4+3+2 + 6)];
@endif 	
@ifdef ATARI520ST	
	// Remember: the m68k needs aligning, so no bytes in classes. Add 4 bytes for the test
	Vars::j := Vars::zp[(21)];
@endif 	
	
	if (Vars::j=2) then Common::PASS() else Common::FAIL();
end;


// Indirect assignment integer 
procedure CTest4();
begin
	Vars::text := "T4:";
	Vars::pm:=#Vars::monsters[5];
	Vars::pm.intData[1]:=3;
	if (Vars::monsters[5].intData[1]=3) then Common::PASS() else Common::FAIL();
end;

procedure CTest5();
begin
	Vars::pm:=#Vars::monsters[4];
	
	Vars::pm.pos.y:=5;	
	Vars::text := "T5:";
	Vars::zp:=#Vars::monsters;
@ifndef ATARI520ST	
	if (Vars::zp[sizeof(Vars::Monster)*4 + (5+6)]=5) then Common::PASS() else Common::FAIL();
@endif

@ifdef ATARI520ST	
	if (Vars::zp[sizeof(Vars::Monster)*4 + (6+5+6)]=5) then Common::PASS() else Common::FAIL();
@endif
end;

// Indirect method call
procedure CTest6();
begin
	Vars::text := "T6:";
	Vars::pm:=#Vars::monsters[8];
	Vars::pm.Move1(11,12);
//	if (Vars::pm.x=11 and Vars::pm.y=12) then Common::PASS() else Common::FAIL();
	if (Vars::pm.y=12) then Common::PASS() else Common::FAIL();
end;

// Indirect method call from withing another class
procedure CTest7();
begin
	Vars::pm:=#Vars::monsters[5];
	Vars::pm.pos.Move2(15,16);
	Vars::text := "T7:";
	if (Vars::pm.pos.x=15 and Vars::pm.pos.y=16) then Common::PASS() else Common::FAIL();
end;


var
	tp : pointer of Vars::Mini;
	
// Direct array method call from withing another class within....
procedure CTest8();
begin
	Vars::pm:=#Vars::monsters[3];
//	Vars::pm.pos.Move2(15,16);
	Vars::text := "T8:";
	Vars::pm.pos.minis[1].a:=10;
	Vars::pm.pos.minis[1].b:=20;
	Vars::pm.pos.minis[1].IncA(); // calculates a+=b, so A should be 30
		
	

	if (Vars::pm.pos.minis[1].a=30) then Common::PASS() else Common::FAIL();
end;

// Direct access in array of objects using PYTHON syntax
procedure CTest9();
begin
	
	Vars::v1:=3;
	Vars::pm:=#Vars::monsters[Vars::v1];
	// Direct use
	Vars_Monster_Move1(#Vars::monsters[Vars::v1],25,24);
	Vars::text := "T9:";
	if (Vars::pm.y=24 and Vars::pm.x=25) then Common::PASS() else Common::FAIL();
end;

// Direct access in array of objects using C++ syntax
procedure CTest10();
begin
	
	Vars::v1:=3;
	Vars::pm:=#Vars::monsters[Vars::v1];
	
	// Direct use
	Vars::monsters[Vars::v1].Move1(11,13);
	Vars::text := "C0:";
	if (Vars::pm.y=13 and Vars::pm.x=11) then Common::PASS() else Common::FAIL();
end;




// "This" assign array with int value mix



procedure CTestC1();
var
zp:pointer;
begin
	sl.curLen := 0;
	sl.Add("HALLO");
	sl.Add(#text);
	sl.Add("BALL");
	zp := sl.items[2].str;
	Vars::text := "C1:";

	if (zp[0]=66) then Common::PASS() else Common::FAIL();
end;


// Test that int return values from classes actually work
procedure CTestC2();
begin
	Vars::v1:=1;
	
	sl.items[Vars::v2].str:=$56AB;


	Vars::i2 := 0;
	Vars::i2 := sl.items[Vars::v2].str;
	Vars::i1 := 0;
	Vars::i1 := sl.items[Vars::v1].getValue();
	Vars::text := "C2:";
	
	if (Vars::i1=Vars::i2) then Common::PASS() else Common::FAIL();
end;

// Direct access in array of objects using PYTHON syntax
procedure CTestC3();
begin
	
	// Direct use
	sl.Stuff();
//	Common::DebugByte(Vars::v1);
	Vars::text := "C3:";
	if (Vars::v1=3+3*2) then Common::PASS() else Common::FAIL();
end;

procedure CTest11();
begin
	s1.Init(1000);
	Vars::text := "C11:";
	if (s1.str=1000) then Common::PASS() else Common::FAIL();
end;


procedure MTest1();
begin
	s1.a := 100;
	s1.b := 100;
	s1.MulTest1();	
	Vars::text := "M1:";
	if (s1.b=10000) then Common::PASS() else Common::FAIL();
	
end;

procedure MTest2();
begin
	s1.a := 200;
	s1.b := 200;
	s1.MulTest2();	
	Vars::text := "M2:";
	if (s1.b=40000) then Common::PASS() else Common::FAIL();
	
end;


procedure MTest3();
begin
	ps1:=#s1;
	ps1.a := 100;
	ps1.b := 100;
	ps1.MulTest1();	
	Vars::text := "M3:";
	if (ps1.b=10000) then Common::PASS() else Common::FAIL();
	
end;

procedure MTest4();
begin
	ps1:=#s1;
	ps1.a := 200;
	ps1.b := 100;
	ps1.MulTest2();	
	Vars::text := "M4:";
	if (ps1.b=20000) then Common::PASS() else Common::FAIL();
	
end;

procedure DTest1();
begin
	ps1:=#s1;
	ps1.b := 200;
	ps1.a := 10;
	ps1.DivTest1();	
	Vars::text := "D1:";
	if (ps1.b=20) then Common::PASS() else Common::FAIL();
	
end;


procedure Exec();
begin

	// initialise everything
	Common::Initialise("TEST CLASSES");
	
	// Mul and div
	@ifndef GAMEBOY
	CTest1();
	CTest2();
	CTest3();
	CTest4();
	CTest5();
	CTest6();
    CTest7(); 
    CTest8();    
    CTest9(); 
    @ifndef X86
    CTest11();
    @endif
    
    CTest10();
 
    @endif
	@ifdef C64
	// Implement this
    CTestC1(); // ADD still fails on the cpc.. damn
    CTestC3(); // ADD still fails on the cpc.. damn
//    CTestC2(); // FAILS fix
    @endif


	@ifdef X86
	// Implement this
    CTestC1(); // ADD still fails on the cpc.. damn
    CTestC3(); // ADD still fails on the cpc.. damn
//    CTestC2(); // FAILS fix
//      CTestC2(); // FAILS fix
  @endif
//@ifdef NOT_DEFINED_YET_FIX_THIS_UP
	MTest1();
	MTest2();
	MTest3();
	MTest4();
	DTest1();
//@endif
    // Fails for now - FIX UP
	Common::WaitABit();

end;

end.