unit AdvancedMath;
@use "unittests/vars"
@use "unittests/common"
var
procedure Advanced01();
begin
	Vars::v1:=10;
	Vars::p1:=$0400 + Vars::v1;
	Vars::text := "01:"; if Vars::p1=$040A then Common::PASS() else Common::FAIL();
end;

procedure Advanced02();
begin
	Vars::p1:=$0400 + $50;
	Vars::text := "02:"; if Vars::p1=$0450 then Common::PASS() else Common::FAIL();
end;

procedure Advanced03();
begin
	Vars::v1:=100;
	Vars::p2:=$100;
	Vars::p1:=$0400 + Vars::v1*$20+Vars::p2;
	Vars::text := "03:"; if Vars::p1=$1180 then Common::PASS() else Common::FAIL();
end;

procedure Advanced04();
begin
	Vars::p2:=$4000;
	Vars::v1:=1;
	Vars::p2[Vars::v1]:=2;
	Vars::p1:=$0400;
	Vars::p1:=Vars::p1 + Vars::p2[Vars::v1];
	Vars::text := "04:"; if Vars::p1=$0402 then Common::PASS() else Common::FAIL();
end;

procedure Advanced05();
begin
	Vars::p2:=$4000;
	Vars::p2[1]:=$20;
	Vars::v1:=1;
	Vars::p1:=$0400;
	Vars::p1:=Vars::p1 + Vars::p2[1]*2;

	Vars::text := "05:"; if Vars::p1=$0440 then Common::PASS() else Common::FAIL();
end;

procedure Advanced06();
begin
	Vars::p2:=$4000;
	Vars::v1:=1;
	Vars::v2:=3;
	Vars::p2[Vars::v1]:=$20;
	Vars::p1:=$0400;
	Vars::p1:=Vars::p1 + Vars::p2[Vars::v1]*Vars::v2 + $10;
	Vars::text := "06:"; if Vars::p1=$0470 then Common::PASS() else Common::FAIL();
end;
/*
	Completely aware that this one fails. Works with *1, also with pointer +
*/
procedure Advanced07();
begin
	Vars::p2:=$4000;
	Vars::p2[1]:=$20;
	Vars::v1:=1;
	Vars::p1:=$0400 + Vars::p2[1];
	Vars::text := "07:"; if Vars::p1=$0420 then Common::PASS() else Common::FAIL();
end;

procedure Advanced08();
begin
	Vars::p2:=$4000;
	Vars::p2[1]:=$20;
	Vars::p1:=$0400 + Vars::p2[1]*3;
	Vars::text := "08:"; if Vars::p1=$0460 then Common::PASS() else Common::FAIL();
end;

@ifdef C64

function factorial( p: byte stack ):byte;
begin
	if (p>1) then
	begin
		p:=p*factorial(p-1);
	end;
	factorial:=p;
end;

procedure AdvFactorial();
begin
	Vars::v1 := factorial(5);
	Vars::text := "09:"; if Vars::v1=120 then Common::PASS() else Common::FAIL();
end;

@endif

/*
procedure Advanced09();
begin
	Vars::p2:=$4001;
	Vars::v1:=3;
	Vars::p2[1]:=$20;
	Vars::p1:=$0400 + toPointer(hi(Vars::p2)+$10*Vars::v1,lo(Vars::p2)*3+Vars::p2[1]*2)*2;
	
	Vars::text := "09:"; if Vars::p1=$E486 then Common::PASS() else Common::FAIL();
end;
*/

procedure MulDivCombo1();
begin
	Vars::text := "MD1:";
	Vars::v1 := $10;
	Vars::i2 := $0200;
	// $100/$02*$10 = $800
	asm(";ccc");
	Vars::i1 := ($100 / (hi(Vars::i2)) ) * Vars::v1; 
	if Vars::i1=$800 then Common::PASS() else Common::FAIL();
end;

procedure MulDivCombo2();
begin
	Vars::text := "MD2:";
	Vars::v1 := $10;
	Vars::i2 := $0400;
	// $100*$04/$10 = $40
	Vars::i1 := ($100 * (hi(Vars::i2)) ) / Vars::v1; 
	if Vars::i1=$40 then Common::PASS() else Common::FAIL();
end;

procedure MulDivCombo3();
begin
	Vars::text := "MD3:";
	Vars::v1 := $10;
	Vars::v2 := $4;
	Vars::i2 := $0200;
	// $10*$100/$02*4 = $2000
	Vars::i1 :=  (Vars::v1*($100 / (hi(Vars::i2)) ))*Vars::v2; 
	if Vars::i1=$2000 then Common::PASS() else Common::FAIL();
end;


procedure Exec();
begin
	// initialise everything
	Common::Initialise("ADVANCED TESTS");
	
	@ifndef GAMEBOY  // Fails because of `ex`
	Advanced01();
	Advanced02();
	Advanced03();
	@ifndef AMSTRADCPC
	Advanced04();
	Advanced05();
	@ifndef ATARI520ST
	Advanced06();
	Advanced07(); 
	@endif
	Advanced08();
	@endif
	@endif
	@ifdef C64
	AdvFactorial();
	@endif
	MulDivCombo1();
	MulDivCombo2();
	MulDivCombo3();
//	Advanced09();// fails
	Common::WaitABit();
end;

end.