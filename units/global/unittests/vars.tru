unit Vars;
var  
	sc, co : pointer; 			// screen and colour RAM pointers
	text: string = "TEST                 ";	// text to display when writing a test result
	@define COLUMNWIDTH 5
	barr : array[10] of byte;
	v1, v2,v3,rb,v4 : byte;
	i1, i2,i3,i4,ri, j2 : integer;
	p1, p2,rp : pointer;
	ip : pointer of integer;
	a1,a2 : array[10] of integer;
	j,i : byte;
	
	
	ia1 : array[10] of integer = buildtable("i*100");
	ba1 : array[10] of byte = buildtable("i");

	Mini = class
		a:integer; // 4   // 7
		b:byte;    // 6   // 9
		
		procedure IncA();
		begin
			this.a+=this.b;
		end;
		
	end;


	Point = class
		minis : array[2] of Mini;
		x,y : byte;
		procedure Move2( pm1, pm2 : byte);
		begin
			this.x := pm1;
			this.y := pm2;			
		end;
		
	end;

	Monster = class
		x,y : byte;
		// 2    4
		ival : integer;
		//4     6 
		pos: Point;
		// c    18 
		byteData : array[5] of byte;
		// 11   24
		c : byte;
		// 12   26 
		intData : array[7] of integer;
		// 20   40  0 $2A
	//	more : array[3] of Point;		
		procedure Move1( m1, m2 : byte);
		begin
			this.x := m1;
			this.y := m2;			
		end;
	end;


	pm : pointer of Monster;
	m : Monster;
	const NN : integer = 10;
	monsters: array[ NN ] of Monster;
	zp: pointer;



function IntegerReturn(ir_p1 : byte) : integer;  
var
	
begin
	j2:=ir_p1*2;
	IntegerReturn:=j2;
end;	

function ByteReturn(ir_p1 : global byte) : byte;  
var
	
begin
	v3:=ir_p1*2;
	ByteReturn:=v3;
end;	

end.
