Unit Unittests;

@use "unittests/common"
@use "unittests/case"
@use "unittests/casts"
@use "unittests/integer"
@ifndef CPU_M6809
@use "unittests/classes"
@endif
@use "unittests/ifthenelse"
@use "unittests/muldiv"
@use "unittests/forloop"
@use "unittests/registers"
@use "unittests/strings"
@use "unittests/bitop"
@use "unittests/functions"
@use "unittests/various"

@use "unittests/advanced_math"



var
//	allTests: array[] of integer = (#AdvancedTests);
	const noTests : byte = 13;
	currentTest : byte;
	isDone: boolean;

procedure Exec();
begin
	currentTest := 0;
	isDone := false;
	Common::TestInit();
@ifndef ATARI520ST
	while (Common::Status() = 0 and isDone = false) offpage do
@endif
	
@ifdef ATARI520ST
	while (Common::unittests_status = 0 and isDone = false) do
@endif 
	begin
		Common::TestSuiteInit();
		@ifndef GAMEBOY  // Fails because of `org`
@ifndef CPU_M6809
		if (currentTest=9) then Classes::Exec();
@endif
		if (currentTest=6) then ForLoop::Exec();
		@endif
		if (currentTest=0) then CaseTest::Exec();
		if (currentTest=8) then Casts::Exec();
		if (currentTest=1) then BitOp::Exec();
		if (currentTest=5) then MulDiv::Exec();
		if (currentTest=11) then IfThenElse::Exec();
		if (currentTest=12) then IntegerTest::Exec();
		@ifndef X86
		// Pointer tests - the x86 needs a different set of pointer tests.
		if (currentTest=4) then AdvancedMath::Exec();
		@endif
		if (currentTest=7) then Registers::Exec();
		if (currentTest=10) then Various::Exec();
		if (currentTest=2) then Strings::Exec();
		if (currentTest=3) then Functions::Exec();

		currentTest+=1;
				
		if (currentTest>=noTests) then
			isDone := true;
		
	end;
end;

procedure ExecCoco3();
begin
	currentTest := 0;
	
	AdvancedMath::Exec();	
	return;
	Casts::Exec();
//	return;
	Strings::Exec();
	Various::Exec();	
	Casts::Exec();
	MulDiv::TRS80();
		
	isDone := false;
	Registers::Exec();
	IntegerTest::Exec();
	BitOp::Exec();
	CaseTest::Exec();
	Common::TestInit();
	IntegerTest::Exec();
	ForLoop::Exec();
	IfThenElse::Exec();
	
/*	while (Common::Status() = 0 and isDone = false) do
	begin
	//	Common::TestSuiteInit();
//	
		currentTest+=1;
				
		if (currentTest>=noTests) then
			isDone := true;
		
	end;
*/	
end;

end.
