unit Various;
var


// memory inc test
	@ifndef X86
	@ifndef ATARI520ST
	
procedure Test1();
begin
	Vars::text := "PP:";
	

	poke(Vars::addr,0,10);
	inc(Vars::addr);	
	Vars::v1:=peek(Vars::addr,0);
	
	if (peek(Vars::addr,0)=11) then Common::PASS() else Common::FAIL();
end;
	@endif
@endif

	@ifndef TRS80COCO
procedure LoHi1();
begin
	Vars::i1 := $1234;
	Vars::text := "T2:";
	Common::CR();
	if (lo(Vars::i1)=$34) then Common::PASS() else Common::FAIL();
end;

procedure LoHi2();
begin
	Vars::i1 := $1234;
	Vars::text := "T3:";
	Common::CR();
	if (hi(Vars::i1)=$12) then Common::PASS() else Common::FAIL();
end;
@endif
//--------------------------------------------------------------------------------------------
/* MAIN PROGRAM */

procedure TestAutomaticOffpage();
begin
	Vars::text := "TPAGE:";
	Vars::v1:=0;
	if (Vars::v1=0) then
	begin
		nop(128); // automatically make offpage
	end;
	Common::PASS();
	
end;


procedure TestAddress1();
begin
	Vars::text := "A1:";
	Vars::addr := $80;
	if (Vars::addr=$80) then Common::PASS() else Common::FAIL();
	
end;
procedure TestAddress2();
begin
	Vars::text := "A2:";
	Vars::addr[1] := $90;
	if (Vars::addr[1]=$90) then Common::PASS() else Common::FAIL();
end;
procedure TestAddress3();
begin
	Vars::text := "A3:";
	Vars::v1 := 1;
	asm(";bbb");
	Vars::addr[Vars::v1] := $A0;
	if (Vars::addr[Vars::v1]=$A0) then Common::PASS() else Common::FAIL();
end;

procedure Exec();
begin
	Common::Initialise("VARIOUS");
	
	TestAutomaticOffpage();
	// Mul and div
	@ifndef X86
	@ifndef ATARI520ST
	Test1();
	@endif
	@endif
	
	@ifndef TRS80COCO
	LoHi1();
	LoHi2();
	@endif
	
	@ifndef X86
	TestAddress1();
	TestAddress2();
	TestAddress3();
	@endif
	Common::WaitABit();
end;



end.