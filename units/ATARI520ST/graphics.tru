Unit Graphics;
var  
	@donotremove above1
	@donotremove above2
	@donotremove above3
	@donotremove above4
	above1 : array[511] of byte aligned;
	screen1Buf : array[180*200] of byte aligned;
	//above2 : array[4096] of byte aligned; 
	screen2Buf : array[180*200] of byte aligned; 
	empty : array[512] of byte aligned;



	rnd : array[256] of integer = buildtable("Math.random()*0xFFFF");
	screen_tab : pointer of long;
	
   curBufIndex, i,k,j,l,m,n,c1,c2: integer = 0; 
   il : long;
   p1,p2,addr,curBuf,offBuf,buf1,buf2 : pointer of integer;
   col,x,y : integer;
	htabInOrg : array[16] of integer = buildtable("(((65536-Math.pow(2.0,16-i))))");
	htabOutOrg : array[16] of integer  = buildtable("(Math.pow(2,16-i)-1)");

	hTabMainCol : array[64*2] of integer;
	htabIn, htabOut : array[64*16] of integer;
	@donotremove empty

	

	screentab1, screentab2 : array[256] of long aligned;

	@donotremove bsrc
	@donotremove bdst
	@donotremove bdx
	@donotremove bdy
	@donotremove bw
	@donotremove bh
	@donotremove badd
	
	@donotremove BlitSetup
	
	bsrc,bdst: pointer of integer; 
	bdx, bdy,bw,bh : integer;
	badd,badd2 : long;
	hx, hy, hl,hc:integer;

	@donotremove Graphics_htabIn
	@donotremove htabOut
	@donotremove htabInOrg
	@donotremove htabOutOrg
	@donotremove hTabMainCol
	@donotremove j
	@donotremove Graphics_empty
	@donotremove Graphics_screenBuf	
	@donotremove empty
	@donotremove screenBuf	
	@donotremove shiftTab

	// Tab for shl >8
	shiftTab : array[] of integer = (
	0,0, 
	1,0, 
	2,0, 
	3,0, 
	4,0, 
	5,0, 
	6,0, 
	7,0, 
	8,0, 
	8,1, 
	8,2,
	8,3,
	8,4,
	8,5,
	8,6,
	8,7,
	8,8);








procedure SetScreenBuffer(buff : pointer of long);
begin
asm("
  	move.l  Graphics_buff,d0             ; put screen1 address in d0
    clr.b   d0                       ; put on 256 byte boundary

    clr.b   $ffff820d                ; clear STe extra bit
    lsr.l   #8,d0
    move.b  d0,$ffff8203            ; put in mid screen address byte
    lsr.w   #8,d0
    move.b  d0,$ffff8201            ; put in high screen address byte

;                section bss
 ;               ds.b    256                      ; 256 byte clear buffer
;screen          ds.b    32000                    ; the screen
");
end;



procedure SetupMultab(sm_screen,sm_t1:pointer of long);
begin
	for i:=0 to 200 do sm_t1[i]:=sm_screen + i*160;
end;


procedure SingleBuffer();
begin
		SetScreenBuffer(#screen1Buf);
		curBuf:=buf1;
		offBuf:=buf1;
		screen_tab:=#screentab1;

end;


procedure FlipBuffers();
begin

	curBufIndex:=(curBufIndex+1)&1;
	if (curBufIndex=0) then
	begin
		SetScreenBuffer(#screen1Buf);
		curBuf:=buf2;
		offBuf:=buf1;
		screen_tab:=#screentab2;
	end
	else
	begin
		SetScreenBuffer(#screen2Buf);
		curBuf:=buf1;
		offBuf:=buf2;
		screen_tab:=#screentab1;
	end;
	
end;

procedure Init();
begin
	SetScreenBuffer(#screen1Buf);
	GetScreen(buf1);
	SetScreenBuffer(#screen2Buf);
	GetScreen(buf2);
	
	curBuf:=buf1;
	offBuf:=buf2;
	
	SetupMultab(buf2, #screentab2);
	SetupMultab(buf1, #screentab1);
	
	screen_tab:=#screentab2;

end;



procedure Putpixel(addr:global ^integer; x,y,col:global integer);
begin
	asm("
		move.l Graphics_addr,a0
		move.w Graphics_col,d2
		move.w Graphics_x,d0
		move.w Graphics_y,d1
		jsr putpixel_slow
	");
end;

procedure PutpixelDirect();
begin
	asm("
		jsr putpixel_slow
	");
end;



procedure InitHTabs();
begin
	k:=0;
	// Colors
	for i:=0 to 16 do
	begin
		// Pixels
		for j:=0 to 4 do
		begin
			l:=i>>j;
			if (l&1=true) then
			begin
				hTabMainCol[k]:=$FFFF;
			end
			else
			begin			
				hTabMainCol[k]:=0;
			end;
			k:=k+1;
		end;

	end;
	k:=0;
	for m:=0 to 16 do
	begin
	
	// Colors
	for i:=0 to 16 do
	begin
		for j:=0 to 4 do
		begin
			l:=i>>j;
			l:=l&1;
			if (l=1) then
			begin
				n:=htabInOrg[m];
				htabIn[k]:=n;
				n:=htabOutOrg[m];
				htabOut[k]:=n;		
			end
			else
			begin			
				htabIn[k]:=0;		
				htabOut[k]:=0;		
			end;
			k:=k+1;
		end;

	end;
	
	end;

end;

procedure LHLine(hx, hy, hl,hc:global integer);
begin

	if (hl<16) then
	begin
		HLine(hx,hy,hl,hc);
	end
	else
	asm("

		 ;; D5 contains width
		move.w Graphics_hl,d5
		
		lsr #4,d5	 ; width of the line, divide by 16 to get number of $FF cells	
		
		sub.w #2,d5
		
		moveq.l #0,d2
		moveq.l #0,d1
		moveq.l #0,d3

		; hTabMainCol is the center filler, 64 integers		
		lea Graphics_hTabMainCol,a1
		; Both in and out tabs consist of 16 * 64 = 1024 integers
		lea Graphics_htabOut,a2
		lea Graphics_htabIn,a3
		
		; Main dudes * 16 color possibilities each, mul 
		
		move.w Graphics_hc,d1
		and.w #15,d1
		lsl.w #3,d1  ; mul with 4 (patterns) * 2 (integer size)
		
		add.l d1,a1	 ; $FFFF and 0000, main dudes, color shift. Keep!
		

		; Now to find the end and start values
		
		move.w Graphics_hx,d2 ; x-pos start and stop
		
		and.w #15,d2 ; and 15
		move.w d2,d3 ; copy for END line
		move.w Graphics_hl,d4 ; find end value
		and.w #15,d4
		
		add.w d4,d3 ; Add hline to find end pos 
		cmp #16,d3 ; Overflow?
		bcs ccc
		add.w #1,d5 ; add a center counter loop!
ccc:

		and.w #15,d3 
		
		lsl.w #7,d2       ; 64 bytes per frame + integer = 128  = shl 7
		lsl.w #7,d3       ; 64 bytes per frame + integer = 128  = shl 7
		
		add d1,d2  ; Add color shift start
		add d1,d3  ; add color shift end
		
		add.l d2,a2	 ; htabIn
		add.l d3,a3	 ; htabOut





	   ; find X position
	   	
		move.w Graphics_hx,d2
		; Originally : shr 4 to get x-pos, then shl 2+1 to get bitplane pos (4) in word(2)=8 
		; instead of shr 4  and shl 3, we simply shl 1 and  do an and
		lsr.w #1,d2 
		and #%1111111111111000,d2 
		
		; Set screen pointer
		move.l Graphics_curBuf,a0

		; Mul with 160, faster to do a shl 7+ shl 5	
		move.w Graphics_hy,d1
		move.w d1,d3
;		mulu.w #160,d1
		; FAST mul 160 = 128 + 32 = shl 7 + shl 5
		lsl.w #7,d1		
		lsl.w #5,d3	
		add.w d3,d1
		
		add.l d1,a0
		add.l d2,a0
		
		; Copy first byte from (a2)
;		move.l 0(a2),d0
;		or.l d0,(a0)+
;		move.l 4(a2),d0
;		or.l d0,(a0)+


		; Copy first byte from (a2)
		move.l 0(a0),d1 ; screen
		move.l 0(a2),d0 ; data
		
		eor #$FFFFFFFF,d0 
		and.l d0,d1               
		eor #$FFFFFFFF,d0
		or.l d1,d0

		move.l d0,0(a0)
		
		move.l 4(a0),d1
		move.l 4(a2),d0
		
		
		eor #$FFFFFFFF,d0
		and.l d0,d1               
		eor #$FFFFFFFF,d0
		or.l d1,d0
		
		move.l d0,4(a0)
		


		
		add.l #8,a0		
		add.l #8,a2		

		; main block
		; Skip main block if no main
		cmp #0,d5
		blt hlf_cont2		
		

hlf2:
		move.l 0(a1),(a0)+
		move.l 4(a1),(a0)+
		dbf d5,hlf2

hlf_cont2:

		move.l 0(a3),d0
		or.l d0,(a0)+
		move.l 4(a3),d0
		or.l d0,(a0)+
		
	");

end;


procedure LHLineSingle(hx, hy, hl,hc:global integer);
begin

	if (hl<16) then
	begin
		HLine(hx,hy,hl,hc);
	end
	else
	asm("

		 ;; D5 contains width
		move.w Graphics_hl,d5
		
		lsr #4,d5	 ; width of the line, divide by 16 to get number of $FF cells	
		
		sub.w #2,d5
		
		moveq.l #0,d2
;		moveq.l #0,d1
;		moveq.l #0,d3

		; hTabMainCol is the center filler, 64 integers		
		lea Graphics_hTabMainCol,a1
		; Both in and out tabs consist of 16 * 64 = 1024 integers
		lea Graphics_htabOut,a2
		lea Graphics_htabIn,a3
		
		; Main dudes * 16 color possibilities each, mul 
		
		move.w Graphics_hc,d1
		move.w #15,d1
		and.w #15,d1
		lsl.w #3,d1  ; mul with 4 (patterns) * 2 (integer size)
		
		add.l d1,a1	 ; $FFFF and 0000, main dudes, color shift. Keep!
		

		; Now to find the end and start values
		
		move.w Graphics_hx,d2 ; x-pos start and stop
		
		and.w #15,d2 ; and 15
		move.w d2,d3 ; copy for END line
		move.w Graphics_hl,d4 ; find end value
		and.w #15,d4
		
		add.w d4,d3 ; Add hline to find end pos 
		cmp #16,d3 ; Overflow?
		bcs ccc2
		add.w #1,d5 ; add a center counter loop!
ccc2:

		and.w #15,d3 
		
		lsl.w #7,d2       ; 64 bytes per frame + integer = 128  = shl 7
		lsl.w #7,d3       ; 64 bytes per frame + integer = 128  = shl 7
		
		add d1,d2  ; Add color shift start
		add d1,d3  ; add color shift end
		
		add.l d2,a2	 ; htabIn
		add.l d3,a3	 ; htabOut





	   ; find X position
	   	
		move.w Graphics_hx,d2
		; Originally : shr 4 to get x-pos, then shl 2+1 to get bitplane pos (4) in word(2)=8 
		; instead of shr 4  and shl 3, we simply shl 1 and  do an and
		lsr.w #1,d2 
		and #%1111111111111000,d2 
		
		; Set screen pointer
		move.l Graphics_curBuf,a0

		; Mul with 160, faster to do a shl 7+ shl 5	
		move.w Graphics_hy,d1
		move.w d1,d3
;		mulu.w #160,d1
		; FAST mul 160 = 128 + 32 = shl 7 + shl 5
		lsl.w #7,d1		
		lsl.w #5,d3	
		add.w d3,d1
		
		add.l d1,a0
		add.l d2,a0
		
		add.w Graphics_hc,a0		

		; Copy first byte from (a2)
		
		move.w (a2),d1		
		or.w d1,(a0)+

		add.l #6,a0
		
		
		; main block
		; Skip main block if no main
		cmp #0,d5
		blt hlf_cont3		
		

hlf3:
;		move.l 0(a1),(a0)+
;		move.l 4(a1),(a0)+
		move.w (a1),(a0)
		add.l #8,a0
		
		dbf d5,hlf3

hlf_cont3:

		move.w 0(a3),d0
		or.w d0,(a0)+
		
	");

end;


procedure ClearScreenFast(cls_buf:pointer of long);
begin
asm("
    move.l  Graphics_cls_buf,a6
    add.l #4*40*200,a6
    movem.l Graphics_empty,d0-d7/a0-a5
    rept 571
    movem.l d0-d7/a0-a5,-(a6)
    endr 
    movem.l d0-d7,-(a6)
  ");
end;


procedure BlitSetup();
begin
/*	i:=bdx&15;
	j:=0;
	if (i>8) then 
	begin
		j:=(i-8);
		i:=8;
	end;
*/
//	x1:=bdx>>4;
	asm("
		

		clr.l d0
;		clr.l d1
;		clr.l d6
;		clr.l d7
;		clr.l d3
		

;		move.w Graphics_bdx,d6
;		move.w Graphics_bdx,d7
		
		;; Set up shift tab		
		move.w Graphics_bdx,d0 ; bdx
		and.w #15,d0
		lsl.w #2,d0 ; *2 integer *2 table
		lea Graphics_shiftTab,a1
;		add.l d0,a1
		move.w 0(a1,d0),d7
		move.w 2(a1,d0),d6


	;	move.w Graphics_i,d6
	;	move.w Graphics_j,d7
		
		move.l Graphics_bsrc,a1
		move.l Graphics_bdst,a2
		
		move.w Graphics_bdy,d0
		
		move.w d0,d1
		lsl.w #5,d1
		lsl.w #7,d0
		add.l d1,a2
		add.l d0,a2
		
		move.w Graphics_bdx,d0
		lsr.w #1,d0
		and #%1111111111111000,d0 
				
		add.w d0,a2

		; 160-w*4

; Taken care of with badd		
;		move.w #160,d5
;		move.w Graphics_bw,d0
;		asl.w #3,d0 ; *8
;		add.w #8,d0 + 8
;		sub.w d0,d5
	

		sub.l #8,a1 ; go 8 back
");

end;


procedure Blit(bsrc, bdst: global pointer of integer; bdx, bdy,bw,bh : global integer;badd:global long);
begin
	asm("
		jsr Graphics_BlitSetup	

		move.w Graphics_bh,d3 ; height
blit_y:
		move.w Graphics_bw,d4 ; width
		
blit_x:
;		move.w #3,d2
inner:
		rept 4
		move.w 0(a1),d0
		swap d0
		move.w 8(a1),d0
;		swap d0
		
		lsr.l d6,d0
		lsr.l d7,d0
			
		or.w d0,(a2)+
		add.l #2,a1	




;		dbf d2,inner
		endr			


		dbf d4,blit_x
		
		add.l Graphics_badd,a2
		add.l Graphics_badd,a1
		
		dbf d3,blit_y
						
		

	");	

end;

procedure BlitChar(bsrc,bdst: global pointer of integer; bdx, bdy,bw,bh : global integer;badd,badd2:global long);
begin
	asm("
		jsr Graphics_BlitSetup	

		move.w Graphics_bh,d3 ; height
blitc_y:
		move.w Graphics_bw,d4 ; width
		
blitc_x:
;		move.w #3,d2
innerc:
		rept 4
		move.w 0(a1),d0
		swap d0
		move.w 8(a1),d0
;		swap d0
		
		lsr.l d6,d0
		lsr.l d7,d0
		or.w d0,(a2)+
		add.l #2,a1	



		endr
;		dbf d2,innerc
			


		dbf d4,blitc_x
		
		add.l Graphics_badd,a2
		add.l Graphics_badd2,a1
		
		dbf d3,blitc_y
						
		

	");	

end;


procedure BlitSingle(bsrc,bdst: global pointer of integer; bdx, bdy,bw,bh : global integer; badd:global long);
begin
	asm("
		
		jsr Graphics_BlitSetup
		move.w Graphics_bh,d3 ; height
blit2_y:
		move.w Graphics_bw,d4 ; width
		
blit2_x:

		move.w 0(a1),d0
		swap d0
		move.w 8(a1),d0
	;	swap d0
		lsr.l d6,d0
		lsr.l d7,d0
			
		or.w d0,(a2)+
		add.l #8,a1	
		add.l #6,a2	



		dbf d4,blit2_x
		
		add.l Graphics_badd,a2
		add.l Graphics_badd,a1
		
		dbf d3,blit2_y
						
		

	");	

end;

procedure Clear8pixelBorder(badd: global long);
begin
	asm("
		move.l Graphics_curBuf,a2
		move.l Graphics_badd,d1
		move.l #199,d5
megafill_whoo:
		move.l d1,(a2)+
		move.l d1,(a2)+
		move.l d1,(a2)+
		move.l d1,(a2)+
		add.l #160-(8*4),a2
		move.l d1,(a2)+
		move.l d1,(a2)+
		move.l d1,(a2)+
		move.l d1,(a2)+

		dbf d5,megafill_whoo				


	");

end;


procedure BlitMaskSingle(bsrc,bdst: global pointer of integer; bdx, bdy,bw,bh : global integer; badd:global long);
begin
	asm("
		
		jsr Graphics_BlitSetup
		move.w Graphics_bh,d3 ; height
blit3_y:
		move.w Graphics_bw,d4 ; width
		
blit3_x:

;		move.l #3,d5
blit3_inner	:	
		rept 4

		move.w 0(a1),d0
		swap d0
		move.w 8(a1),d0
	;	swap d0
		lsr.l d6,d0
		lsr.l d7,d0
			
;		eor #$FFFFFFFF,d0
;		lsl.w #1,d0
		and.w d0,(a2)+

		add.l #2,a1	
;		add.l #6,a2	
		endr
;		dbf  d5,blit3_inner


		dbf d4,blit3_x
		
		add.l Graphics_badd,a2
		add.l Graphics_badd,a1
		
		dbf d3,blit3_y
						
		

	");	

end;

procedure BlitMaskSingleOR(bsrc,bdst: global pointer of integer; bdx, bdy,bw,bh : global integer; badd:global long);
begin
	asm("
		
		jsr Graphics_BlitSetup
		add.l #2,a2		
		move.w Graphics_bh,d3 ; height
blit4or_y:
		move.w Graphics_bw,d4 ; width
blit4or_x:

;		move.l #3,d5
blit4or_inner	:	
		rept 1

		move.w 0(a1),d0
		swap d0
		move.w 8(a1),d0
	;	swap d0
		lsr.l d6,d0
		lsr.l d7,d0
			
		;move.w (a2),d1
		;and d1,d0
;		eor #$FFFFFFFF,d0
;		or.w (a2),d0
		
		or.w d0,(a2)+

		add.l #2,a1	
;		add.l #6,a2	
		endr
		add.l #2*3,a1	
		add.l #2*3,a2	
		
;		dbf  d5,blit4or_inner


		dbf d4,blit4or_x
		
		add.l Graphics_badd,a2
		add.l Graphics_badd,a1
		
		dbf d3,blit4or_y
						
		

	");	

end;

procedure CopyGraphics(bsrc,bdst: global pointer of integer; bdx, bdy, bw,bh : global integer; badd:global long);
begin
	
	asm("
		

		clr.l d0
		

		move.l Graphics_bsrc,a1
		move.l Graphics_bdst,a2
		
		move.w Graphics_bdy,d0
		
		move.w d0,d1
		lsl.w #5,d1
		lsl.w #7,d0
		add.l d1,a2
		add.l d0,a2
		add.l d1,a1
		add.l d0,a1
		
		move.w Graphics_bdx,d0
		lsr.w #1,d0
		and #%1111111111111000,d0 
				
		add.l d0,a2
		add.l d0,a1

		; 160-w*4

		;sub.l #8,a1 ; go 8 back
		


		 ; START

		move.w Graphics_bh,d3 ; height
copy4_y:
		move.w Graphics_bw,d4 ; width
		
copy4_x:


		move.l (a1)+,(a2)+
		move.l (a1)+,(a2)+
				
		dbf d4,copy4_x
		
		add.l Graphics_badd,a2
		add.l Graphics_badd,a1
		
		dbf d3,copy4_y

		
	");

end;

procedure CopyGraphicsFast2(bsrc,bdst: global pointer of integer; bdx, bdy, bh : global integer);
begin
	
	asm("
		

		clr.l d0
		

		move.l Graphics_bsrc,a1
		move.l Graphics_bdst,a2
		
		move.w Graphics_bdy,d0
		
		move.w d0,d1
		lsl.w #5,d1
		lsl.w #7,d0
		add.l d1,a2
		add.l d0,a2
		add.l d1,a1
		add.l d0,a1
		
		move.w Graphics_bdx,d0
		lsr.w #1,d0
		and #%1111111111111000,d0 
				
		add.l d0,a2
		add.l d0,a1

		; 160-w*4

		


		 ; START

		move.w Graphics_bh,d3 ; height
copy5_y:
		move.w Graphics_bw,d4 ; width
		


		move.l (a1)+,(a2)+
		move.l (a1)+,(a2)+
		move.l (a1)+,(a2)+
		move.l (a1)+,(a2)+
				
		
		add.l #(160-16),a2
		add.l #(160-16),a1
		
		dbf d3,copy5_y

		
	");

end;


procedure BlitMaskSingle2(bsrc,bdst: global pointer of integer; bdx, bdy,bw,bh : global integer; badd:global long);
begin
	asm("

	
		
		jsr Graphics_BlitSetup

;		move.l a2,a4
;		sub.l #Graphics_bdst,a4		
;		add.l #storage,a4
");
/*
asm("
		move.l #storage,a4

		move.w Graphics_bdy,d0
		
		move.w d0,d1
		lsl.w #5,d1
		lsl.w #7,d0
		add.l d1,a4
		add.l d0,a4
		
		move.w Graphics_bdx,d0
		lsr.w #1,d0
		and #%1111111111111000,d0 
				
		add.w d0,a4
");
*/
asm("		


		move.w Graphics_bh,d3 ; height
blit4_y:
		move.w Graphics_bw,d4 ; width
		
blit4_x:

;		move.l #3,d5
blit4_inner	:	
		move.w 0(a1),d0
		swap d0
		move.w 8(a1),d0
	;	swap d0
		lsr.l d6,d0
		lsr.l d7,d0
			
;		eor #$FFFFFFFF,d0

		rept 4
		
		and.w d0,(a2)+


		endr
		add.l #8,a1	
		dbf d4,blit4_x

		
		add.l Graphics_badd,a2
		add.l Graphics_badd,a4
;		add.l Graphics_badd,a1
		
		dbf d3,blit4_y
						
		

	");	

end;


procedure RandomizeArray(ra_p:pointer of integer; ra_len:integer);
begin
	for j:=0 to ra_len do
	begin
		k:=rnd[j]&511;// random index
		while (k>=ra_len) then k:=k-ra_len;
//		if (k=ra_len) then k:=0;
		// Swap
		c1:=ra_p[j];
		c2:=ra_p[k];
		ra_p[j]:=c2;
		ra_p[k]:=c1;
	end;


end;


procedure FillPoly(pol_target: pointer of long);
begin

asm("

* This fills a polygon.
* It consists of 2 parts:
* part 1 - the the x-coordinates of all boundary points are entered in xbuf
* part 2 - the holine routine fills the polygon from the values in xbuf

* PART 1. Fill the buffer.
* Regs:
* a3: pointer to crds_in - coords. list (x1,y1,x2,y2,....x1,y1)
* a2: pointer to xbuf
* d0(x1),d1(y1),d2(x2),d3(y2),d4(vertex no)/(decision ver.,
* d5(lowest y),d6(highest y)/(the increment),d7(edge counter)
* polygon vertices are ordered anticlockwise



* Initialise all variables
filxbuf:
	move.w	no_in,d7	no. edges in polygon
	beq	holine_fil_end		quit if none to do
	lea	crds_in,a3	pointer to the coords. of vertices
	subq.w	#1,d7		the counter
	move.w	#399,d5		initial minimum y
	clr.w	d6		initial maximum y
filbuf1	lea	xbuf,a2		init. buffer pointer
	addq.w	#2,a2		point to ascending side (low word)
	move.w	(a3)+,d0	next x1
	move.w	(a3)+,d1	next y1
	move.w	(a3)+,d2	next x2
	move.w	(a3)+,d3	next y2
	subq.w	#4,a3		point back to x2
* Find the lowest and highest y values: the filled range of xbuf
	cmp.w	d5,d1		test(y1-miny)
	bge	filbuf3		minimum y unchanged
	move.w	d1,d5		minimum y is y1
filbuf3	cmp.w	d1,d6		test(maxy-y1)
	bge	filbuf5		unchanged
	move.w	d1,d6		maximum y is y1

filbuf5	exg	d5,a5		save minimum y
	exg	d6,a6		save maximum y
	clr.w	d4		init. decision var
	moveq	#1,d6		init. increment

* All lines fall into two catagories: [slope]<1, [slope]>1.
* The only difference is whether x and y are increasing or decreasing.
* See if line is ascending (slope > 0) or descending (slope < 0).
	cmp.w	d1,d3		(y2-y1)=dy
	beq	y_limits	ignore horizontals altogether
	bgt	ascend		slope > 0
* It must be decending. Direct output to LHS of buffer. a2 must
* be reduced and we have to reverse the order of the vertices.
	exg	d0,d2		exchange x1 and x2
	exg	d1,d3		exchange y1 and y2
	subq.w	#2,a2		point to left hand buffer
ascend	sub.w	d1,d3		now dy is +ve
* Set up y1 as index to buffer
	lsl.w	#2,d1
	add.w	d1,a2
* Check the sign of the slope
	sub.w	d0,d2		(x2-x1)=dx
	beq	vertical	if it's vertical its a special case
	bgt	pos_slope	the slope is positive
* It must have a negative slope but we deal with this by making the
* increment negative
	neg.w	d6		increment is decrement
	neg.w	d2		and dx is positive
* now decide whether the slope is high (>1) or low (<1)
pos_slope:
	cmp.w	d2,d3		test(dy-dx)
	bgt	hislope		slope is >1
* The slope is less than 1 so we want to increment x every time and then
* check whether to also increment y. If so this value of x must be saved.
* dx is the counter. Initial error D1=2dy-dx
* If last D -ve, then x=x=inc, don't record x, D=D+err1
* If last D +ve, then x=x+inc,y=y+inc, record this x, D=D+err2
* err1=2dy; err2=2dy-2dx
* dx in d2, dy in d3, incx in d6, x in d0
	move.w	d2,d5
	subq.w	#1,d5		dx-1 is the counter
	add.w	d3,d3		2dy=err1
	move.w	d3,d4		2dy
	neg.w	d2		-dx
	add.w	d2,d4		2dy-dx = D1
	add.w	d4,d2		2dy-2dx=err2
	move.w	d0,(a2)		save first x
inc_x	add.w	d6,d0		x=x+incx
	tst.w	d4		what is the decision?
	bmi	no_stk		don't inc y, don't record x
	add.w	#4,a2		inc y so record x; find next buffer place
	move.w	d0,(a2)		save this x
	add.w	d2,d4		update decision	D=D+err2
	bra.s	next_x		next one
no_stk	add.w	d3,d4		D=D+err1
next_x	dbra	d5,inc_x	increment x again
	bra	y_limits

* The slope is >1 so change the roles of dx and dy
* This time we must increment y each time and record the value of x after
* having done so.
* Init error D1 = 2dx-dy
* If last D -ve, then y=y+inc, D=D+err1, record x
* If last D +ve, then x=x+inc, y=y+inc, D=D+err2, record x
* err1=2dx, err2=2(dx-dy)
* dx in d2, dy in d3, inc in d6, x in d0
hislope	move.w	d3,d5
	subq.w	#1,d5	dy-1 is counter
	add.w	d2,d2	2dx=err1
	move.w	d2,d4	2dx
	neg.w	d3	-dy
	add.w	d3,d4	2dx-dy=D1
	add.w	d4,d3	2dx-2dy=err2
	move.w	d0,(a2)	save 1st x
inc_y	addq.w	#4,a2	next place in buffer (equivalent to incrementing y)
	tst.w	d4	what is the decision?
	bmi	same_x	don't inc x
	add.w	d6,d0	inc x
	add.w	d3,d4	D=D+err2
	bra.s	next_y
same_x	add.w	d2,d4	D=D+err1
next_y	move.w	d0,(a2)	save the x value
	dbra	d5,inc_y
	bra	y_limits
* the special case of a vertical line. x is constant. dy is the counter
vertical:
	move.w	d0,(a2)		save next x
	addq.w	#4,a2		next place in buffer
	dbra	d3,vertical		for all y

* Restore the y limits
y_limits:
	exg	d5,a5
	exg	d6,a6

next_line:
	dbra	d7,filbuf1	do all lines in this polygon
next_poly:

* This part ends with minimum y in d5 and maximum y in d6

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
* PART 2
* set up the pointer
	lea	xbuf,a1		base address
	sub.w	d5,d6		no. lines to do-1
	move.w	d6,d7		is the counter
	beq	poly3		quit if all sides are horizontal
	move.w	d5,d3		minimum y is the start
	lsl.w	#2,d5		4*minimum y = offset into xbuf
	add.w	d5,a1		for the address to start
	move.w	colour,d4	the colour
	subq	#1,d3		reduce initial y
poly2	addq	#1,d3		next y
	move.w	(a1)+,d2	next x1
	move.w	(a1)+,d1	next x2
	sub.w	d2,d1		x2-x1
	bmi	poly4
	addq	#1,d1		N = no to do in this line
;	move.l	screen_tab,a4	where the screen table starts
    move.l Graphics_pol_target,a4
	movem.l d0-d7/a0-a6,-(sp)	save the registers
	
	bsr	holine_holine			draw the line
	
	movem.l (sp)+,d0-d7/a0-a6	restore the registers
poly4	dbra	d7,poly2	repeat for all y values
poly3	rts



	");
	
end;

procedure CopyMask(p1,p2 : global pointer of integer; i : global integer);
begin
asm("
	move.l graphics_p1,a0
	move.l graphics_p2,a1
	
	move.w graphics_i,d5

copymask_loop:
	move.l (a0)+,d0
	move.l d0,d1
	eor d1,d1
	move.l #0,d1
	and (a1),d1
	or.l d0,(a1)+
	dbf.w d5,copymask_loop	


	");
end;

procedure EorBuffer(p1 : global pointer of integer; il: global long);
begin
	asm("
		move.l Graphics_p1,a2
		move.l #$FFFFFFFF,d2
		move.l Graphics_il,d3
topp_flipp_eor:
		move.w (a2),d0
		eor.w d2,d0
		move.w d0,(a2)+
		
		dbf d3,topp_flipp_eor

	");

end;


end.
