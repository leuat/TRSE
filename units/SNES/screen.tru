unit Screen;
var
	
	defaultPalette:array[256] of integer = BuildTable("(i%32)+((i/32)%32)<<5 +((i/(32*32))%32)<<10");
//	palette:array[256] of integer = BuildTable("");
	p1:pointer;
	zp:lpointer;
	zi : pointer of integer;
	i1,i2,i3:integer;
	x,y,i,j,att,id,xx,yy,w,h,l,dx,dy,flip : byte;
	quadrant: array[4] of integer=buildtable(" i*32*32 ");
	tab32 : array[32] of integer = buildtable(" i*32 ");
	tabPointer:pointer of integer;
	const BG1:address=$1000;
	const BG2:address=$1400;
	const BG3:address=$1800;
	const BG4:address=$1C00;
	
	
	const ENABLE_BG1 : byte = %1;
	const ENABLE_BG2 : byte = %10;
	const ENABLE_BG3 : byte = %100;
	const ENABLE_BG4 : byte = %1000;
	const ENABLE_SPRITES : byte = %10000;
	
	
	const TILE_PRIORITY:byte = $20;
	const SPRITE_PRIORITY0:byte = $00;
	const SPRITE_PRIORITY1:byte = $10;
	const SPRITE_PRIORITY2:byte = $20;
	const SPRITE_PRIORITY3:byte = $30;
	
	const BG_32X32: byte=%00;
	const BG_64X32: byte=%01;
	const BG_32X64: byte=%10;
	const BG_64X64: byte=%11;


	sprites : array[128*4] of byte at $1E00;	
	
	@donotremove id
	@donotremove i1
	
	/**
	Copies [param 3] bytes <b>from</b> [param 1] to the palette register starting with color [param 2]
	
	**/
	
procedure SetPalette(zp:global lpointer;x:global byte;i1:global integer);
begin
	asm("
   lda #$20
   sta VMAIN   ; VRAM stride of 1 word

   lda Screen_x   
   sta CGADD ; start with color 0 (background)
   ldy #0
@loop:
   lda [Screen_zp],y
   sta CGDATA
   iny
   lda [Screen_zp],y
   sta CGDATA

   iny

   cpy Screen_i1
   bne @loop

	");
end;

procedure EnableGFX(x:global byte);
begin
	asm("
   ; Show BG1
   lda Screen_x
   sta TM
	
	");
end;


procedure EnableDisplay() inline;
begin
	asm("
   ; Maximum screen brightness
   lda #$0F
   sta INIDISP


	");	
	
end;

procedure DisableDisplay() inline;
begin
	asm("
   lda #$80
   sta INIDISP
	");	
	
end;
procedure CopyToVRAMNoDMA(zp:global lpointer;i1,i2 : global integer);
begin
	asm("
   ; Load character set into VRAM
   lda #$20
   sta VMAIN   ; VRAM stride of 1 word
   ldx Screen_i1
   stx VMADDL
 	

   
_topp:   
   ldy #0
@charset_loop:
   
   lda [Screen_zp],y
   sta VMDATAH ; color index high bit set -> neutral red (2)
   iny
   lda [Screen_zp],y
   sta VMDATAL ; color index low bit = 0
   iny
   cpy Screen_i2
   bne @charset_loop
	
   ");
	
end;


procedure CopyToVRAM(zp:global lpointer;i1,i2 : global integer);
begin
	asm("
   lda #$80
   sta VMAIN   ; VRAM stride of 1 word
   
        ldx Screen_i1
        stx $2116 ; vram address
        lda #1
        sta $4300 ; transfer mode, 2 registers 1 write
                          ; $2118 and $2119 are a pair Low/High
        lda #$18  ; $2118
        sta $4301 ; destination, vram data
        ldx Screen_zp
        stx $4302 ; source
        lda Screen_zp+2
        sta $4304 ; bank
        ldx Screen_i2
        stx $4305 ; length
        lda #1
        sta $420b ; start dma, channel 0
        
   lda #$20
   sta VMAIN   ; VRAM stride of 1 word
	");
	
	

end;


/*
procedure CopyTilesToVRAM2bpp(zp:global pointer;i1:integer);
begin
	i1:=0;
	p1:=zp+8;
	asm("
   ; Load character set into VRAM
   lda #$20
   sta VMAIN   ; VRAM stride of 1 word
   ldx #$000
   stx VMADDL

   ldx #128
   
_topp:   
   ldy #0
@charset_loop:
   
   lda (Screen_zp),y
   sta VMDATAH ; color index high bit set -> neutral red (2)
   lda (Screen_p1),y
   sta VMDATAL ; color index low bit = 0
   iny
   cpy #(8)
   bne @charset_loop
	
   ");

	p1+=16;
	zp+=16;

   asm("   
      
   dex
   bne _topp
   
	
	");
	
end;
*/
/*procedure CopyC64CharsetToVRAM2bpp(zp:global pointer);
begin
	asm("
   ; Load character set into VRAM
   lda #$20
   sta VMAIN   ; VRAM stride of 1 word
   ldx #VRAM_CHARSET
   stx VMADDL
   ldy #0
   
@charset_loop:
   
   lda (Screen_zp),y
   stz VMDATAL ; color index low bit = 0
   sta VMDATAH ; color index high bit set -> neutral red (2)
   iny
   cpy #(256*8)
   bne @charset_loop
	
	");
	
end;
*/

procedure Init();
begin
	asm("
   clc             ; native mode
   xce
   rep #$10        ; X/Y 16-bit
   sep #$20        ; A 8-bit


   ; Clear registers
   ldx #$33
@loop:
 ;  stz INIDISP,x
   stz NMITIMEN,x
   dex
   bpl @loop

   ; enable NMI for Vertical Blank
   lda #$81
   sta NMITIMEN

   lda #$20
   sta VMAIN   ; VRAM stride of 1 word
   
	");
/*
asm("   

 sep     #$30    ; X,Y,A are 8 bit numbers
  lda     #$8F    ; screen off, full brightness
  sta     INIDISP ; brightness + screen enable register
  stz     OBSEL   ; Sprite register (size + address in VRAM)
  stz     OAMADDL   ; Sprite registers (address of sprite memory [OAM])
  stz     OAMADDH   ;   
  stz     BGMODE   ; Mode 0, = Graphic mode register
  stz     MOSAIC   ; noplanes, no mosaic, = Mosaic register
  stz     BG1SC   ; Plane 0 map VRAM location
  stz     BG2SC   ; Plane 1 map VRAM location
  stz     BG3SC   ; Plane 2 map VRAM location
  stz     BG3SC   ; Plane 3 map VRAM location
  stz     BG12NBA   ; Plane 0+1 Tile data location
  stz     BG34NBA   ; Plane 2+3 Tile data location
  stz     BG1HOFS   ; Plane 0 scroll x (first 8 bits)
  stz     BG1HOFS   ; Plane 0 scroll x (last 3 bits) #$0 - #$07ff
  lda     #$FF    ; The top pixel drawn on the screen isn't the top one in the tilemap, it's the one above that.
  sta     BG1VOFS   ; Plane 0 scroll y (first 8 bits)
  sta     BG2VOFS   ; Plane 1 scroll y (first 8 bits)
  sta     HVBJOY   ; Plane 2 scroll y (first 8 bits)
  sta     BG4VOFS   ; Plane 3 scroll y (first 8 bits)
  lda     #$07    ; Since this could get quite annoying, it's better to edit the scrolling registers to fix this.
  sta     BG1VOFS   ; Plane 0 scroll y (last 3 bits) #$0 - #$07ff
  sta     BG2VOFS   ; Plane 1 scroll y (last 3 bits) #$0 - #$07ff
  sta     HVBJOY   ; Plane 2 scroll y (last 3 bits) #$0 - #$07ff
  sta     BG4VOFS   ; Plane 3 scroll y (last 3 bits) #$0 - #$07ff
  stz     BG2HOFS   ; Plane 1 scroll x (first 8 bits)
  stz     BG2HOFS   ; Plane 1 scroll x (last 3 bits) #$0 - #$07ff
  stz     BG3HOFS   ; Plane 2 scroll x (first 8 bits)
  stz     BG3HOFS   ; Plane 2 scroll x (last 3 bits) #$0 - #$07ff
  stz     BG4HOFS   ; Plane 3 scroll x (first 8 bits)
  stz     BG4HOFS   ; Plane 3 scroll x (last 3 bits) #$0 - #$07ff
  lda     #$80    ; increase VRAM address after writing to $2119
  sta     VMAIN   ; VRAM address increment register
  stz     VMADDL   ; VRAM address low
  stz     VMADDH   ; VRAM address high
  stz     M7SEL   ; Initial Mode 7 setting register
  stz     M7A   ; Mode 7 matrix parameter A register (low)
  lda     #$01
  sta     M7A   ; Mode 7 matrix parameter A register (high)
  stz     M7B   ; Mode 7 matrix parameter B register (low)
  stz     M7B   ; Mode 7 matrix parameter B register (high)
  stz     M7C   ; Mode 7 matrix parameter C register (low)
  stz     M7C   ; Mode 7 matrix parameter C register (high)
  stz     M7D   ; Mode 7 matrix parameter D register (low)
  sta     M7D   ; Mode 7 matrix parameter D register (high)
  stz     M7X   ; Mode 7 center position X register (low)
  stz     M7X   ; Mode 7 center position X register (high)
  stz     M7Y   ; Mode 7 center position Y register (low)
  stz     M7Y   ; Mode 7 center position Y register (high)
  stz     CGADD   ; Color number register ($0-ff)
  stz     W12SEL   ; BG1 & BG2 Window mask setting register
  stz     W34SEL   ; BG3 & BG4 Window mask setting register
  stz     WOBJSEL   ; OBJ & Color Window mask setting register
  stz     WH0   ; Window 1 left position register
  stz     WH1   ; Window 2 left position register
  stz     WH2   ; Window 3 left position register
  stz     WH3   ; Window 4 left position register
  stz     WBGLOG   ; BG1, BG2, BG3, BG4 Window Logic register
  stz     WOBJLOG   ; OBJ, Color Window Logic Register (or,and,xor,xnor)
  sta     TM   ; Main Screen designation (planes, sprites enable)
  stz     TS   ; Sub Screen designation
  stz     TMW   ; Window mask for Main Screen
  stz     TSW   ; Window mask for Sub Screen
  lda     #$30
  sta     CGWSEL   ; Color addition & screen addition init setting
  stz     CGADSUB   ; Add/Sub sub designation for screen, sprite, color
  lda     #$E0
  sta     COLDATA   ; color data for addition/subtraction
  stz     SETINI   ; Screen setting (interlace x,y/enable SFX data)
  stz     NMITIMEN   ; Enable V-blank, interrupt, Joypad register
  lda     #$FF
  sta     WRIO   ; Programmable I/O port
  stz     WRMPYA   ; Multiplicand A
  stz     WRMPYB   ; Multiplier B
  stz     WRDIVL   ; Multiplier C
  stz     WRDIVH   ; Multiplicand C
  stz     WRDIVB   ; Divisor B
  stz     HTIMEL   ; Horizontal Count Timer
  stz     HTIMEH   ; Horizontal Count Timer MSB (most significant bit)
  stz     VTIMEL   ; Vertical Count Timer
  stz     VTIMEH   ; Vertical Count Timer MSB
  stz     MDMAEN   ; General DMA enable (bits 0-7)
  stz     HDMAEN   ; Horizontal DMA (HDMA) enable (bits 0-7)
  stz     MEMSEL   ; Access cycle designation (slow/fast rom)
  cli             ; Enable interrupts
  rep #$10
	");
	
*/	
end;

	
@donotremove nmi
interrupt nmi();
begin
	asm("
	   rep #$10        ; X/Y 16-bit
	   sep #$20        ; A 8-bit
	   phd
	   pha
	   phx
	   phy
	   ; Do stuff that needs to be done during V-Blank
	   
	   lda RDNMI ; reset NMI flag
	   ply
	   plx
	   pla
	   pld
	   
	   plb
	return_int:
	");
end;	


procedure MoveToXY(x,y:global byte,i1:global integer);
begin
	i:=0;
	if (x>31) then 
	begin 
		x:=x&31;
		i+=1;
	end;
	if (y>31) then 
	begin 
		y:=y&31;
		i+=2;
	end;
	i1+=quadrant[i] + tab32[y]+x;
	asm("
	ldx Screen_i1
    stx VMADDL
	");
end;



procedure MoveToCRAM(i1:global integer) inline;
begin
	asm("
	ldx Screen_i1
    stx CGADD
	");
end;

procedure CopyToScreen(zp:global pointer;i1:global integer;x:global byte);
begin
	asm("
   ; Place string tiles in background
   ldy #0
@copy_loop:
   lda Screen_x ; Attribute
   sta VMDATAH
   lda (Screen_zp),y
   sta VMDATAL
   ; //vhopppcc
   iny
   cpy Screen_i1
   bne @copy_loop
	");
	
end;

/**

Tile data attribute organisation (y,x): vhopppcc cccccccc 

**/
procedure PokeVRAM(x,y:global byte);
begin
	poke(^$2118,0,x);
	poke(^$2119,0,y);
end;

procedure FillToVRAM(x,y:global byte;i1:global integer);
begin
	asm("
   ; Place string tiles in background
   
   ldy #0
@fill_loop:
   lda Screen_x ; data
   sta VMDATAL
   lda Screen_y ; attr 1
   sta VMDATAH
   iny
   cpy Screen_i1
   bne @fill_loop
	");
	
end;

procedure PokeCRAM(x:global byte) inline;
begin
	poke(^$2122,0,x);
/*	asm("
   lda Screen_x
   sta CGDATA
		
	");*/
end;

procedure SetBGScreenLocation(x,y:global byte);
begin
	asm("
		XY8
		ldx Screen_x
		lda Screen_y
		sta BG1SC,x
		XY16
	");
end;

procedure SetVRAMDataPosition(x:global byte;i1,i2:global integer);
begin
	y:=(hi(i1)>>4) | (hi(i2)&$F0);
/*	asm("
		lda Screen_y
		sta $210B+1	
	");	*/
	poke(^$210B,x,y);

end;

procedure SetGraphicsMode(y:global byte;i1:global integer);
begin
	// Calculate charset address
	x:=(hi(i1)>>4) | (hi(i1)&$F0);
//	x:=($20>>4) | ($20&$F0);
	asm("
   ; Setup Graphics Mode 0, 8x8 tiles all layers
   lda Screen_y
   sta BGMODE
   lda #>VRAM_BG1
   sta BG1SC ; BG1 at VRAM_BG1, only single 32x32 map (4-way mirror)
   lda #>VRAM_BG2
   sta BG2SC 
   lda #>VRAM_BG3
   sta BG3SC 
   lda #>VRAM_BG4
   sta BG4SC 
   
;   lda #((>VRAM_CHARSET >> 4) | (>VRAM_CHARSET & $F0))
	lda Screen_x
   sta BG12NBA ; BG 1 and 2 both use char tiles
   sta BG34NBA ; BG 1 and 2 both use char tiles
	
	");
end;


procedure SetBGMode(x:global byte);
begin
	asm("
	lda Screen_x
	sta BGMODE
	");
end;


procedure WaitForVerticalBlank() inline;
/*var
	in_nmi:byte;
begin
//	asm(" wai");
	asm("
Wait_NMI:
.a8
.i16
;should work fine regardless of size of A
	lda Screen_in_nmi ;load A register with previous in_nmi
@check_again:	
	WAI ;wait for an interrupt
	cmp Screen_in_nmi	;compare A to current in_nmi
				;wait for it to change
				;make sure it was an nmi interrupt
	beq @check_again
	rts	
	");*/
begin
	asm(" wai");
end;	
/*
procedure CopyArrangementImageData(zp, p1:global pointer; x,y: global byte);
begin
	for j:=0 to y do 
	begin
		for i:=0 to x do
		begin
			zp[0]:=p1[0];
			zp[1]:=p1[1];
			zp+=2;
			p1+=2;
		end;
	end;
//	Screen::CopyToVRAM(zp,#Screen::BG1,32*32*2);
	
end;
*/

procedure Scroll(i1,i2:global integer;i3 : global integer);
begin
	asm("
	ldx Screen_i3
	lda Screen_i1
	sta $210d,x
	lda Screen_i1+1
	sta $210d,x
	inx
	lda Screen_i2
	sta $210d,x
	lda Screen_i2+1
	sta $210d,x
	XY16
	A8
		");
//	zi[0]:=i1;
//	zi[1]:=i2;
end;


procedure WriteSingleSprite(x,y,id,att:global byte);
begin
	asm("
        lda Screen_x       ; horizontal position of first sprite
        sta OAMDATA
        lda Screen_y       ; vertical position of first sprite
        sta OAMDATA
        lda Screen_id                ; name of first sprite
        sta OAMDATA
        lda Screen_att                ; no flip, prio 0, palette 0
        sta OAMDATA
	");
end;



procedure PointToSprite(x:global byte);
begin
	i1:=x<<2;
	asm("
		lda Screen_i1
		sta OAMADDL
		lda Screen_i1+1
		sta OAMADDH
	");
end;

procedure CopySprites(i1:global integer);
begin
	i1:=i1*4;
/*	asm("
		stz OAMADDL
		stz OAMADDH
		ldx #0
copysprites_loop:
		lda 	Screen_sprites,x
        sta OAMDATA
		inx
		cpx Screen_i1
		bne copysprites_loop		
	");	*/
	
	asm("
        ; use constants to access arguments on stack with Direct Addressing

        ; set up DMA channel 0 to transfer data to OAMRAM
        lda #%00000010          ; set DMA channel 0
        sta $4300 
        lda #$04                ; set destination to OAMDATA
        sta $4301    
        ldx #$1E00 ; MirrorAddr          ; get address of OAMRAM mirror
        stx $4302                ; set low and high byte of address 
        stz $4304                ; set bank to zero, since the mirror is in WRAM
        ldx Screen_i1              ; set the number of bytes to transfer 
        stx $4305 

        lda #$01                ; start DMA transfer 
        sta MDMAEN

        ; OAMRAM update is done, restore frame and stack pointer
	");
end;

/**

Put sprite x at xx,yy with tile id with width,height =w,h and attribute att
Note: "flip" isn't implemented yet

(c=high bit tile)
Attribute: vhoopppc  

**/

procedure HideSprite(x,w,h:global byte);
begin
	p1:=#sprites + x<<2;
	for j:=0 to h do
	begin
		for i:=0 to w do
		begin
			p1[0]:=100;
			p1[1]:=248;	
			p1+=4;		
		end;
	end;
	
end;


procedure PutSprite(x,xx,yy, w,h, id,att,flip:global byte);
begin
	p1:=#sprites + x<<2;
	if (flip=1) then
	begin
		att:=att|%01000000;	
		
	for j:=0 to h do
	begin
		dx:=xx+w<<2-1;
		for i:=0 to w do
		begin
			p1[0]:=dx;
			p1[1]:=yy;
			p1[2]:=id;
			p1[3]:=att;
			dx-=8;
			id+=1;
			p1+=4;
		end;
		yy+=8;
		id:=id+16-w;//Move to next row
	end;
	return;		
	end;
	
	
	for j:=0 to h do
	begin
		dx:=xx;
		for i:=0 to w do
		begin
			p1[0]:=dx;
			p1[1]:=yy;
			p1[2]:=id;
			p1[3]:=att;
			p1+=4;
			dx+=8;
			id+=1;
		end;
		yy+=8;
		id:=id+16-w;//Move to next row
	end;
end;



/*
procedure PutSprite(x,xx,yy, w,h, id,att,flip:global byte);
begin
	PointToSprite(x);
	if (flip=1) then
	begin
		att:=att|%01000000;	
		
	for j:=0 to h do
	begin
		dx:=xx+w<<2-1;
		for i:=0 to w do
		begin
//			WriteSingleSprite(dx,yy,l,att);
			asm("
        lda Screen_dx       ; horizontal position of first sprite
        sta OAMDATA
        lda Screen_yy       ; vertical position of first sprite
        sta OAMDATA
        lda Screen_id                ; name of first sprite
        sta OAMDATA
        lda Screen_att                ; no flip, prio 0, palette 0
        sta OAMDATA
			
			");
			dx-=8;
			id+=1;
		end;
		yy+=8;
		id:=id+16-w;//Move to next row
	end;
	return;		
	end;
	
	
	for j:=0 to h do
	begin
		dx:=xx;
		for i:=0 to w do
		begin
//			WriteSingleSprite(dx,yy,l,att);
			asm("
        lda Screen_dx       ; horizontal position of first sprite
        sta OAMDATA
        lda Screen_yy       ; vertical position of first sprite
        sta OAMDATA
        lda Screen_id                ; name of first sprite
        sta OAMDATA
        lda Screen_att                ; no flip, prio 0, palette 0
        sta OAMDATA
			
			");
			dx+=8;
			id+=1;
		end;
		yy+=8;
		id:=id+16-w;//Move to next row
	end;
end;

*/

	
end.