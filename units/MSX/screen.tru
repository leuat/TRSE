unit Screen;
var
	a,b,c : byte ram;
	p1 : pointer ram;


procedure SetColors(	a,b,c : global byte );
begin
	poke(forclr,0,a); // Text color
	poke(bakclr,0,b); // background color
	poke(bdrclr,0,c); // border color
	call(chgclr); // Set colors
end;

procedure PrintString(p1:global pointer);
begin
	asm("
	ld hl,[Screen_p1]
_PrintLoop:
	ld	a,(hl)		; Load the byte from memory at address indicated by HL to A.
	and	a		; Same as CP 0 but faster.
	ret	z		; Back behind the call print if A = 0
	call	CHPUT		; Call the routine to display a character.
	inc	hl		; Increment the HL value.
	jr	_PrintLoop		; Relative jump to the address in the label Print.
	
	");
end;


procedure WriteVDP(a,b: global byte);
begin
	asm("
VDP_DW	equ	$0007	; VDP data write port
 
; Routine to write a byte to a VDP register.
 
; Entry: A = data, B = register number + 80h (to set the bit 7)
;
; Modify: BC 
 	ld a,[Screen_b]
 	ld b,a
 	ld a,[Screen_a]
 	
	push	af
	ld	a,(VDP_DW)	; A = First writing port used to access the internal VDP
	ld	c,a
	inc	c		; C = CPU port connected to the VDP writing port #1
 
	di			; Interrupts must be disabled here
	pop	af
	out	(c),a		; Write the data
	out	(c),b		; Write the register number (with the bit 7 always set)
	ei			; Interrupts can be enabled here
	");
end;


procedure ClearScreen() inline;
begin
	asm(" xor A");
	call(CLS);
end;

procedure Wait(a: global byte);
begin
	for c:=0 to a do
		for b:=0 to 255 do
			asm(" nop");
end;


procedure SetMode4();
begin
	
	asm("
	VdpOut_Control = $99
	ld a,%00000110		;6 - set graphics screen mode bits
	out (VdpOut_Control),a
	ld a,128+0		;[ 0 ] [DG ] [IE2] [IE1] [M5] [M4] [M3] [ 0 ]
	out (VdpOut_Control),a
	
	ld a,%01100000  	; Enable Screen - Enable Retrace Interrupt
	out (VdpOut_Control),a
	ld a,128+1		;R#1  [ 0 ] [BL ] [IE0] [M1 ] [ M2] [ 0 ] [SI ] [MAG] 
	out (VdpOut_Control),a
	
	ld a,31
	out (VdpOut_Control),a
	ld a,128+2		;Pattern layout table
	out (VdpOut_Control),a
	
	ld a,239
	out (VdpOut_Control),a
	ld a,128+5		; Sprite Attrib Table Low
	out (VdpOut_Control),a
	
	ld a,%11110000;1	;		Low nibble defines background color (0 or 1 ?)
	out (VdpOut_Control),a
	ld a,128+7		;Text and screen margin color
	out (VdpOut_Control),a
	
	ld a,128
	out (VdpOut_Control),a
	ld a,128+10		;Color Table High (Don't know what this does!)
	out (VdpOut_Control),a
	
	ld a,%00001010		;Set up Vram (Shrug!) [VR=1] [SPD=SpriteDisable] 
	out (VdpOut_Control),a
	ld a,128+8		;R#8  [MS ] [LP ] [TP ] [CB ] [VR ] [ 0 ] [SPD] [BW ] 
	out (VdpOut_Control),a

	ld a,%00000000 		;[LN ]=1 212 lines / [LN ]=0 = 192 lines
	out (VdpOut_Control),a
	ld a,128+9	        ;R#9  [LN ] [ 0 ] [S1 ] [S0 ] [IL ] [E0 ] [*NT] [DC ]
	out (VdpOut_Control),a
	ret
	");
end;



end.
